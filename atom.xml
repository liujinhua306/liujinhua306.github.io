<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://liujinhua306.github.io</id>
    <title>suisuipingan</title>
    <updated>2019-06-26T03:22:55.237Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://liujinhua306.github.io"/>
    <link rel="self" href="https://liujinhua306.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://liujinhua306.github.io/images/avatar.png</logo>
    <icon>https://liujinhua306.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, suisuipingan</rights>
    <entry>
        <title type="html"><![CDATA[嵌套练习]]></title>
        <id>https://liujinhua306.github.io/post/qian-tao-lian-xi</id>
        <link href="https://liujinhua306.github.io/post/qian-tao-lian-xi">
        </link>
        <updated>2019-06-26T03:22:22.000Z</updated>
        <content type="html"><![CDATA[<p><img src="https://img.shields.io/badge/auth-liujinhua-blue.svg#align=left&amp;display=inline&amp;height=20&amp;originHeight=20&amp;originWidth=92&amp;status=done&amp;width=92" alt="">  <img src="https://img.shields.io/badge/postgresl-9.6-red.svg#align=left&amp;display=inline&amp;height=20&amp;originHeight=20&amp;originWidth=88&amp;status=done&amp;width=88" alt=""></p>
<pre><code class="language-sql">-- 表结构
-- 
-- 学生表student(id,name)
-- 列表项目
-- 课程表course(id,name)
-- 学生课程表student_course(sid,cid,score)
-- sql
create table student(
id int unsigned primary key auto_increment,
name char(10) not null
);
insert into student(name) values('张三'),('李四');

create table course(
id int unsigned primary key auto_increment,
name char(20) not null
);
insert into course(name) values('语文'),('数学');

create table student_course(
sid int unsigned,
cid int unsigned,
score int unsigned not null,
foreign key (sid) references student(id),
foreign key (cid) references course(id),
primary key(sid, cid)
);

insert into student_course values(1,1,80),(1,2,90),(2,1,90),(2,2,70);

--在student_course表中查询每门课成绩都不低于80的学生id
select distinct sid
from student_course
where sid not in (select sid from student_course where score &lt; 80);

-- 查询每个学生的总成绩，结果列出学生姓名和总成绩
select name,sum(score)
from student left join student_course
on student.id=student_course.sid
group by sid;


-- 在student_course表查询各科成绩最高的学生，结果列出学生id、课程id和对应的成绩
select * from student_course as x 
where score&gt;=(
 select max(score) from student_course as y 
 where cid=x.cid
 );
 
 --在student_course表中查询每门课的前2名，结果按课程id升序，同一课程按成绩降序 这个问题也就是取每组的前N条纪录
  select * from student_course x 
 where 2&gt;(
 select count(*) from student_course y 
 where y.cid=x.cid and y.score&gt;x.score
 ) 
order by cid,score desc;
--这也是一个相关嵌套查询，对于每一个分数，如果同一门课程下只有0个、1个分数比这个分数还高，那么这个分数肯定是前2名之一
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[exists练习]]></title>
        <id>https://liujinhua306.github.io/post/exists-lian-xi</id>
        <link href="https://liujinhua306.github.io/post/exists-lian-xi">
        </link>
        <updated>2019-06-26T03:16:24.000Z</updated>
        <content type="html"><![CDATA[<p><img src="https://img.shields.io/badge/postgresl-9.6-red.svg#align=left&amp;display=inline&amp;height=24&amp;originHeight=20&amp;originWidth=88&amp;status=done&amp;width=106" alt=""></p>
<pre><code class="language-sql">-- 学生表
CREATE TABLE `student` (
  `id` int(11) NOT NULL,
  `name` varchar(10) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

INSERT INTO student (`id`, `name`) VALUES ('100', 'xiaoming');
INSERT INTO student (`id`, `name`) VALUES ('101', 'tom');
INSERT INTO student (`id`, `name`) VALUES ('102', 'blue');
INSERT INTO student (`id`, `name`) VALUES ('103', 'jim');
INSERT INTO student (`id`, `name`) VALUES ('104', 'tonny');


-- 课程表
CREATE TABLE `course` (
  `id` int(11) NOT NULL,
  `C_NAME` varchar(20) DEFAULT NULL,
  `C_NO` varchar(10) DEFAULT NULL,
  KEY `id` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

INSERT INTO course (`id`, `C_NAME`, `C_NO`) VALUES ('200', 'java', NULL);
INSERT INTO course (`id`, `C_NAME`, `C_NO`) VALUES ('201', 'php', NULL);
INSERT INTO course (`id`, `C_NAME`, `C_NO`) VALUES ('202', 'python', NULL);
INSERT INTO course (`id`, `C_NAME`, `C_NO`) VALUES ('203', 'c++', NULL);
INSERT INTO course (`id`, `C_NAME`, `C_NO`) VALUES ('204', 'c#', NULL);


-- 选课表
CREATE TABLE `select_course` (
  `id` int(11) NOT NULL,
  `STUDENT_ID` int(11) DEFAULT NULL,
  `COURSE_ID` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `foreign_key_stu` (`STUDENT_ID`),
  KEY `foreign_key_sou` (`COURSE_ID`),
  CONSTRAINT `foreign_key_sou` FOREIGN KEY (`COURSE_ID`) REFERENCES `course` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `foreign_key_stu` FOREIGN KEY (`STUDENT_ID`) REFERENCES `student` (`id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

INSERT INTO select_course (`id`, `STUDENT_ID`, `COURSE_ID`) VALUES ('1', '100', '200');
INSERT INTO select_course (`id`, `STUDENT_ID`, `COURSE_ID`) VALUES ('2', '100', '201');
INSERT INTO select_course (`id`, `STUDENT_ID`, `COURSE_ID`) VALUES ('3', '100', '202');
INSERT INTO select_course (`id`, `STUDENT_ID`, `COURSE_ID`) VALUES ('4', '100', '203');
INSERT INTO select_course (`id`, `STUDENT_ID`, `COURSE_ID`) VALUES ('5', '100', '204');
INSERT INTO select_course (`id`, `STUDENT_ID`, `COURSE_ID`) VALUES ('6', '101', '200');
INSERT INTO select_course (`id`, `STUDENT_ID`, `COURSE_ID`) VALUES ('7', '101', '202');
INSERT INTO select_course (`id`, `STUDENT_ID`, `COURSE_ID`) VALUES ('8', '101', '204');
INSERT INTO select_course (`id`, `STUDENT_ID`, `COURSE_ID`) VALUES ('9', '102', '200');
INSERT INTO select_course (`id`, `STUDENT_ID`, `COURSE_ID`) VALUES ('10', '102', '203');
INSERT INTO select_course (`id`, `STUDENT_ID`, `COURSE_ID`) VALUES ('11', '102', '204');
INSERT INTO select_course (`id`, `STUDENT_ID`, `COURSE_ID`) VALUES ('12', '103', '202');
INSERT INTO select_course (`id`, `STUDENT_ID`, `COURSE_ID`) VALUES ('13', '103', '203');
INSERT INTO select_course (`id`, `STUDENT_ID`, `COURSE_ID`) VALUES ('15', '101', '203');


-- 查询选了所有课程的学生姓名--
SELECT
	NAME
FROM
	student s
WHERE
	NOT EXISTS (
		SELECT
			*
		FROM
			course c
		WHERE
			NOT EXISTS (
				SELECT
					*
				FROM
					select_course sc
				WHERE
					sc.student_id = s.id
				AND sc.course_id = c.id
			)
	);

-- 查询被所有学生都选了的课程名--
SELECT
	c.C_NAME
FROM
	course c
WHERE
	NOT EXISTS (
		SELECT
			*
		FROM
			student s
		WHERE
			NOT EXISTS (
				SELECT
					*
				FROM
					select_course sc
				WHERE
					sc.student_id = s.id
				AND sc.course_id = c.id
			)
	);

-- 查询至少选择了一门课程的学生姓名--
SELECT
	NAME
FROM
	student s
WHERE
	EXISTS (
		SELECT
			*
		FROM
			course c
		WHERE
			EXISTS (
				SELECT
					*
				FROM
					select_course sc
				WHERE
					sc.student_id = s.id
				AND sc.course_id = c.id
			)
	);

-- 查询一门课程也没选的学生姓名--
SELECT
	NAME
FROM
	student s
WHERE
	NOT EXISTS (
		SELECT
			*
		FROM
			course c
		WHERE
			EXISTS (
				SELECT
					*
				FROM
					select_course sc
				WHERE
					sc.student_id = s.id
				AND sc.course_id = c.id
			)
	);

-- 查询没有选择全部课程的学生姓名（包括一门也没选择的同学）
SELECT
	NAME
FROM
	student s
WHERE
	EXISTS (
		SELECT
			*
		FROM
			course c
		WHERE
			NOT EXISTS (
				SELECT
					*
				FROM
					select_course sc
				WHERE
					sc.student_id = s.id
				AND sc.course_id = c.id
			)
	);
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[postgresql常用命令]]></title>
        <id>https://liujinhua306.github.io/post/postgresql-chang-yong-ming-ling</id>
        <link href="https://liujinhua306.github.io/post/postgresql-chang-yong-ming-ling">
        </link>
        <updated>2019-06-26T03:12:12.000Z</updated>
        <content type="html"><![CDATA[<p><img src="https://img.shields.io/badge/author-liujinhua-blue.svg#align=left&amp;display=inline&amp;height=20&amp;originHeight=20&amp;originWidth=104&amp;status=done&amp;width=104" alt=""> 
<img src="https://img.shields.io/badge/postgresql-9.6-red.svg#align=left&amp;display=inline&amp;height=20&amp;originHeight=20&amp;originWidth=94&amp;status=done&amp;width=94" alt=""></p>
<p><a name="86fb9487"></a></p>
<h4 id="常规操作">常规操作</h4>
<ol>
<li>登录postgreSQL所在服务器</li>
<li>执行 psql -U postgres 启动postgreSQL终端</li>
<li>输入数据库密码 12345)(*&amp;^%RFVwsx</li>
<li>执行 \l 查看所有库</li>
<li>执行 \c NXSOC5 即访问NXSOC5数据库</li>
<li>即可执行相关SQL语句操作NXSOC5数据库</li>
<li>\d 表名 查看表结构</li>
</ol>
<p><a name="157d5306"></a></p>
<h4 id="创建数据库">创建数据库</h4>
<pre><code class="language-sql">CREATE DATABASE database_name;
</code></pre>
<p><a name="34609275"></a></p>
<h4 id="修改数据库名称及owner">修改数据库名称及owner</h4>
<pre><code class="language-sql">ALTER DATABASE name RENAME TO new_name

ALTER DATABASE name OWNER TO new_owner
</code></pre>
<p><a name="c40ae226"></a></p>
<h4 id="备份恢复数据库">备份/恢复数据库</h4>
<pre><code class="language-sql">-- postgres 数据库备份命令(该方式会生成二进制的压缩文件)
./pg_dump --host 127.0.0.1 --port 5432 --username &quot;postgres&quot;   --format custom --blobs --verbose --file &quot;/root/socdb.backup&quot; NXSOC_MG

-- NXSOC_MG 为要备份的数据库名。 输入命令后 会提示输入数据库密码。

-- postgres 数据库恢复命令(适合以上备份的方式)
./pg_restore -h 127.0.0.1 -p 5432 -U postgres -W -d NXSOC_MG -v &quot;/root/socdb.backup&quot;

-W 是强制口令提示
-- 输入命令后 会提示输入数据库密码。
</code></pre>
<p><a name="a301a2d4"></a></p>
<h4 id="增加表字段和修改表字段类型">增加表字段和修改表字段类型</h4>
<pre><code class="language-sql">alter table t_siem_dev_find alter  COLUMN  isnew type  int4 ;(修改字段)
alter table t_siem_dev_find add  COLUMN  isnew   int4 ;(增加字段)
</code></pre>
<p>注意： 把id的varchar变为int</p>
<pre><code class="language-sql">postgres=# alter table tb101 alter id type int;
ERROR:  column &quot;id&quot; cannot be cast automatically to type integer
HINT:  Specify a USING expression to perform the conversion.
</code></pre>
<p>上面这样执行后报错了<br />在没有隐式的转换下，就需要指定Using来显示的转换。</p>
<pre><code class="language-sql">postgres=# alter table tb101 alter id type int using id::int;
</code></pre>
<p><a name="14dc2110"></a></p>
<h4 id="子父表继承关系">子父表继承关系</h4>
<pre><code class="language-sql">-- 删除子表与父表的继承关系
alter table t_siem_original_log_20181106 no inherit t_siem_original_log
-- 添加子表与父表的继承关系
alter table t_siem_original_log_20181106  inherit t_siem_original_log
</code></pre>
<p><a name="b30cbcf3"></a></p>
<h4 id="备份表和恢复表">备份表和恢复表</h4>
<pre><code class="language-sql">-- 备份指定表
./pg_dump --host 127.0.0.1 --port 5432 --username &quot;postgres&quot; -Fc -t t_siem_threat_log  -f /threatTable.backup NXSOC5

-- 恢复单表
./pg_restore -h 127.0.0.1 -p 5432 -U postgres -W -d NXSOC5 -t ti_alarm -v &quot;/alarm.backup&quot;
-t指定表

-- 以insert into 的SQL语句导出
pg_dump -h 172.16.12.17 -U postgres --inserts -t  t_siem_moni_ne NXSOC5 &gt; /tmp/test1.sql
</code></pre>
<p><a name="1d259eb8"></a></p>
<h4 id="查看postgresql的oid和表占磁盘大小">查看postgresql的oid和表占磁盘大小</h4>
<pre><code class="language-sql">-- 查看数据库oid
select oid,datname from pg_database; 
-- 查看表的oid
select oid from pg_class where relname='t_siem_alarm_active' ;
select 
-- 查看表占磁盘大小pg_size_pretty(pg_relation_size('t_siem_original_log_201809_39'));
</code></pre>
<p><a name="e0e3ddfc"></a></p>
<h4 id="postgresql时间操作">postgresql时间操作</h4>
<pre><code class="language-sql">-- 当前时间减去两个月
SELECT CURRENT_DATE-interval'2 month');
</code></pre>
<p><a name="f6d2fa2b"></a></p>
<h4 id="删除表的规则">删除表的规则</h4>
<pre><code class="language-sql">DROP RULE &quot;rule_t_siem_original_log_20190426&quot; ON &quot;public&quot;.&quot;t_siem_original_log&quot;;
</code></pre>
<p><a name="75be9192"></a></p>
<h4 id="sql拼接">sql拼接</h4>
<pre><code class="language-sql">Select CONCAT( 'drop table ', tablename, ';' ) 
FROM pg_tables
Where tablename like 't_siem_original_log_%' and tablename &lt; 't_siem_original_log_201901_2';
</code></pre>
<p><a name="5512d417"></a></p>
<h4 id="字符串截取">字符串截取</h4>
<pre><code class="language-sql">update  t_portal_monitor_table  set srccity= substring(sitekindname from 1 for 2) where  createdatetime&gt; '2019-01-02 00:00:00'
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[postgresql 脚本语句练习]]></title>
        <id>https://liujinhua306.github.io/post/postgresql</id>
        <link href="https://liujinhua306.github.io/post/postgresql">
        </link>
        <updated>2019-06-26T03:09:15.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-sql">DO
$do$
BEGIN
IF EXISTS (SELECT 1 FROM orders) THEN
   DELETE FROM orders;
ELSE 
   INSERT INTO orders VALUES (1,2,3);
END IF;
END
$do$
</code></pre>
<pre><code class="language-sql">-- 查询t_sys_menu表的id并赋值给menu变量（menu变量是RECORD类型的） 然后for循环 查询t_sys_role_resource表
-- 中是否有该menuid的记录。没有就插入。 
DO $body$ DECLARE
menu RECORD;
BEGIN
    FOR menu IN ( SELECT recordid FROM t_sys_menu )
    LOOP
  IF
    ( SELECT COUNT ( 1 ) FROM t_sys_role_resource WHERE roleid = '1' AND menuid = menu.recordid ) = 0 --一定要加括号
  THEN
      INSERT INTO &quot;public&quot;.&quot;t_sys_role_resource&quot; ( &quot;recordid&quot;, &quot;roleid&quot;, &quot;menuid&quot;, &quot;buttons&quot; )
    VALUES
      ( menu.recordid, '1', menu.recordid, NULL );
    ELSE 
    --nothing to do;
    
  END IF;
  
END LOOP;

END;
$body$ LANGUAGE PLPGSQL;
</code></pre>
<pre><code class="language-sql">-- 查询出menuid后再赋值给menu_id
DO $body$ DECLARE
menu_id VARCHAR ( 1000 );
BEGIN
    menu_id=(select menuid from t_sys_role_resource where recordid='800005003' );
    update t_sys_menu set flag=0 where recordid=menu_id;
END;
$body$ LANGUAGE PLPGSQL;
</code></pre>
]]></content>
    </entry>
</feed>