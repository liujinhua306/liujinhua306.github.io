<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://liujinhua306.github.io</id>
    <title>suisuipingan</title>
    <updated>2019-06-26T06:42:08.267Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://liujinhua306.github.io"/>
    <link rel="self" href="https://liujinhua306.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://liujinhua306.github.io/images/avatar.png</logo>
    <icon>https://liujinhua306.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, suisuipingan</rights>
    <entry>
        <title type="html"><![CDATA[freemarker Java 模板引擎 基本语法]]></title>
        <id>https://liujinhua306.github.io/post/freemarker</id>
        <link href="https://liujinhua306.github.io/post/freemarker">
        </link>
        <updated>2019-06-26T06:36:42.000Z</updated>
        <content type="html"><![CDATA[<p><a name="7w7Tb"></a></p>
<h3 id="版本说明">版本说明</h3>
<p>DEA :STS<br />JDK：1.8<br />freemarker Version:2.3.28<br />这里将通过maven项目进行说明我们的用法。首先引入freemarker 依赖到我们的maven项目中</p>
<pre><code class="language-xml"> &lt;dependency&gt;
	  &lt;groupId&gt;org.freemarker&lt;/groupId&gt;
	  &lt;artifactId&gt;freemarker&lt;/artifactId&gt;
	  &lt;version&gt;2.3.28&lt;/version&gt;
	&lt;/dependency&gt;
</code></pre>
<p><a name="0QcmA"></a></p>
<h2 id="1-freemarker-用法之-hello-word">1 freemarker 用法之 Hello word</h2>
<p>在resource目录下创建template目录并添加helloworld.ftl 模板文件 内容如下：</p>
<pre><code class="language-html">&lt;html&gt;               
&lt;head&gt;  
	&lt;title&gt;hello world&lt;/title&gt;
&lt;/head&gt; 
 &lt;body&gt; 
	&lt;h1&gt;this is ${who} hello World&lt;/h1&gt;
 
&lt;/body&gt;  
&lt;/html&gt; 
</code></pre>
<p>创建配置实例 并将模板和数据进行输出</p>
<pre><code class="language-java">package cn.lijunkui.examples;
 
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.util.HashMap;
import java.util.Map;
 
import org.junit.Test;
 
import freemarker.template.Configuration;
import freemarker.template.Template;
import freemarker.template.TemplateException;
 
public class FreemarkerDemo {
	@Test
	public void helloWord() throws IOException, TemplateException {
		
		Configuration cfg = new Configuration(Configuration.VERSION_2_3_28);
		//指定模板文件的来源
		String path = FreemarkerDemo.class.getClassLoader().getResource(&quot;template&quot;).getPath();
		cfg.setDirectoryForTemplateLoading(new File(path));
		//这是模板的编码
		cfg.setDefaultEncoding(&quot;UTF-8&quot;);
		//获取模板
		Template template = cfg.getTemplate(&quot;helloworld.ftl&quot;); 
		//创建FreeMarker的数据模型  
        Map&lt;String,String&gt; root = new HashMap&lt;String,String&gt;();  
        root.put(&quot;who&quot;,&quot;freemarker&quot;);
        //这是输出文件
        File file = new File(&quot;D://&quot; +&quot;helloWord.html&quot;);
		Writer out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file)));
		//将模板与数据模型合并
        template.process(root, out); 
        out.flush();  
        out.close();  
	}
}


</code></pre>
<p><img src="https://cdn.nlark.com/yuque/0/2019/png/196377/1559814065943-228c1c79-6a5c-4ef5-a5af-6165e0b6f5cc.png#align=left&amp;display=inline&amp;height=210&amp;originHeight=210&amp;originWidth=431&amp;size=0&amp;status=done&amp;width=431" alt=""></p>
<p><a name="u8P05"></a></p>
<h2 id="2-data-model数据模型">2 data-model：数据模型</h2>
<p>hello word的示例其实就是 Template + data-model = output 接下来我们引用一下官方的示例介绍一下数据模型<br />数据模型是树状结构 如下图<br /><img src="https://cdn.nlark.com/yuque/0/2019/png/196377/1559814103044-fca371e7-c597-4c80-9338-1679d4271351.png#align=left&amp;display=inline&amp;height=203&amp;originHeight=203&amp;originWidth=608&amp;size=0&amp;status=done&amp;width=608" alt=""><br />以上只是一个可视化; 数据模型不是文本格式，而是来自Java对象。对于Java程序员来说，root可能是带有getUser() 和getLatestProduct()方法的Java对象，或者是Map带有&quot;user&quot;和&quot;latestProducts&quot;键的Java 。同样， latestProduct也许是一个Java对象 getUrl()和getName() 方法。</p>
<pre><code class="language-html">&lt;html&gt; 
&lt;head&gt; 
  &lt;title&gt;欢迎！&lt;/ title&gt; 
&lt;/head&gt; 
&lt;body&gt; 
  &lt;h1&gt;欢迎${user}！&lt;/ h1&gt; 
  &lt;p&gt;我们的最新产品：
  &lt;a href =&quot;${latestProduct.url}&quot;&gt; ${latestProduct.name} &lt;/a&gt;！
&lt;/body&gt; 
&lt;/html&gt;

</code></pre>
<pre><code class="language-java">@Test
	public void dataModel() throws IOException, TemplateException {
		Configuration cfg = new Configuration(Configuration.VERSION_2_3_28);
		//指定模板文件的来源
		String path = FreemarkerDemo.class.getClassLoader().getResource(&quot;template&quot;).getPath();
		cfg.setDirectoryForTemplateLoading(new File(path));
		//这是模板的编码
		cfg.setDefaultEncoding(&quot;UTF-8&quot;);
		//获取模板
		Template template = cfg.getTemplate(&quot;data-model.ftl&quot;); 
		//创建FreeMarker的数据模型  
        Map&lt;String,Object&gt; root = new HashMap&lt;String,Object&gt;();  
        root.put(&quot;user&quot;,&quot;Big Joe&quot;);
        Product product = new Product();
        product.setName(&quot;绿色鼠标&quot;);
        product.setUrl(&quot;products/greenmouse.html&quot;);
        root.put(&quot;latestProduct&quot;,product);
        //这是输出文件
        File file = new File(&quot;D://&quot; +&quot;dataModel.html&quot;);
		Writer out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file)));
		//将模板与数据模型合并
        template.process(root, out); 
        out.flush();  
        out.close();  
	}

</code></pre>
<p><img src="https://cdn.nlark.com/yuque/0/2019/png/196377/1559814164673-6cc7df56-9a62-4fcb-8295-bf9b5dd11749.png#align=left&amp;display=inline&amp;height=252&amp;originHeight=252&amp;originWidth=592&amp;size=0&amp;status=done&amp;width=592" alt=""></p>
<p><a name="8cevq"></a></p>
<h2 id="3-freemarker-注释">3 freemarker 注释</h2>
<p>我们可以通过 &lt;#-- 注释内容 --&gt; 来进行注释 如下图<br /><img src="https://cdn.nlark.com/yuque/0/2019/png/196377/1559814195658-6d1e4281-6e3c-43d5-95f4-4f80487e1c60.png#align=left&amp;display=inline&amp;height=249&amp;originHeight=249&amp;originWidth=566&amp;size=0&amp;status=done&amp;width=566" alt="">
<a name="HkYPl"></a></p>
<h2 id="4-freemarker-条件指令">4 freemarker 条件指令</h2>
<p>我们可以通过&lt;#if&gt;  &lt;#elseIf&gt; &lt;#else&gt; 进行条件判断逻辑处理 具体操作如下<br />条件指令模板内容：</p>
<pre><code class="language-html">
&lt;html&gt;
&lt;head&gt; 
  &lt;title&gt;条件指令介绍！&lt;/ title&gt; 
&lt;/head&gt; 
&lt;body&gt; 
 &lt;#-- 条件指令介绍 --&gt;
&lt;#if (5 &gt; 4) &gt; 
	5 比较大
&lt;/#if&gt;
-------------------------------
&lt;#if (!false)&gt;
	!false == true
&lt;/#if&gt;
-----------------------------
&lt;#if (&quot;a&quot; == &quot;b&quot;)&gt;
	a 和 b 相同	
&lt;#else&gt;
	a 和 b 不相同
&lt;/#if&gt;
-----------------------------
&lt;#if ( c == d)&gt;
	c 和 d 相同	
	&lt;#elseif (&quot;a&quot; != &quot;b&quot;)&gt;
	c 和 d 不相同
	&lt;#else&gt;
	出错了！
&lt;/#if&gt;
&lt;/body&gt;
&lt;/html&gt;

</code></pre>
<p>条件指令测试用例： <br />这里我们对测试用例进行了封装，后面的测试用例都将调用 <strong>initTemplate</strong> 来进行测试</p>
<pre><code class="language-java">@Test
	public void condition() throws IOException, TemplateException {
		Map root = new HashMap();
		root.put(&quot;c&quot;, &quot;c&quot;);
		root.put(&quot;d&quot;, &quot;d&quot;);
		initTemplate(&quot;condition&quot;,root);
	}
 
	public void initTemplate(String templateName,Map root) throws IOException, TemplateException {
		Configuration cfg = new Configuration(Configuration.VERSION_2_3_28);
		//指定模板文件的来源
		String path = FreemarkerDemo.class.getClassLoader().getResource(&quot;template&quot;).getPath();
		cfg.setDirectoryForTemplateLoading(new File(path));
		//这是模板的编码
		cfg.setDefaultEncoding(&quot;UTF-8&quot;);
		//获取模板
		Template template = cfg.getTemplate(templateName+&quot;.ftl&quot;); 
		//创建FreeMarker的数据模型  
      
        //这是输出文件
        File file = new File(&quot;D://&quot; +templateName+&quot;.html&quot;);
		Writer out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file)));
		//将模板与数据模型合并
        template.process(root, out); 
        out.flush();  
        out.close();  
	}

</code></pre>
<p><a name="UVRuU"></a></p>
<h2 id="5-freemarker-list-指令">5 freemarker list 指令</h2>
<p>我们可以通过 &lt;#list 序列 as item&gt;  来进行序列的遍历。另外list 还有一些内置的序列的函数</p>
<ul>
<li>?size:序列的数量</li>
<li>_index ：序列中元素的角标</li>
<li>_has_next：是否是当前迭代循环中的最后一项</li>
<li>?sort：对序列中的元素进行排序</li>
<li>？sort_by：根据实例中的具体的否个字段进行排序</li>
<li>?is_enumerable:是否是集合</li>
</ul>
<p>测试list模板内容</p>
<pre><code class="language-html">&lt;html&gt;
&lt;head&gt; 
  &lt;title&gt;list 指令介绍！&lt;/ title&gt; 
&lt;/head&gt; 
&lt;body&gt; 
&lt;#list 0..5 as item&gt;
	${item}
&lt;/#list&gt;
-----------------------------
_index:交标值 ,?size 获取集合的长度
list的长度：${wordList?size}
&lt;#list wordList as word&gt;
	当前的交标是：${word_index}值是：${word}
&lt;/#list&gt;
--------------------------------
_has_next：是否是当前迭代循环中的最后一项
&lt;#list wordList as word&gt;
	&lt;#if word_has_next&gt;
		不是最后一项：${word},
	&lt;#else&gt;
		是最后一项：${word}
	&lt;/#if&gt;                         
&lt;/#list&gt;
---------------------------------
字符串（按首字母排序）,数字，日期值
正常遍历
&lt;#list wordList as word&gt;
	${word}                    
&lt;/#list&gt;
升序
&lt;#list wordList?sort as word&gt;
	${word}                    
&lt;/#list&gt;
降序
&lt;#list wordList?sort?reverse as word&gt;
	${word}                    
&lt;/#list&gt;
反向遍历
&lt;#list wordList?reverse as word&gt;
	${word}                    
&lt;/#list&gt;
 
-------------------------------------
正常遍历
&lt;#list productList as p&gt;
	${p.name}#${p.url}#${p.saleNum}                      
&lt;/#list&gt;
升序
&lt;#list productList?sort_by(&quot;saleNum&quot;) as p&gt;
	${p.name}#${p.url}#${p.saleNum}                    
&lt;/#list&gt;
降序
&lt;#list productList?sort_by(&quot;saleNum&quot;)?reverse as p&gt;
	${p.name}#${p.url}#${p.saleNum}                     
&lt;/#list&gt;
反向遍历
&lt;#list productList?reverse as p&gt;
	${p.name}#${p.url}#${p.saleNum}                      
&lt;/#list&gt;
---------------------------------------
&lt;#list map?keys as item&gt;
	&lt;#if (item == &quot;productMap3&quot;)&gt;
		&lt;#list map[item] as p&gt;
			${p.name}#${p.url}#${p.saleNum}                      
		&lt;/#list&gt;
	&lt;#else&gt;
		${map[item]}
	&lt;/#if&gt;
&lt;/#list&gt;
----------------------------------------
?is_string：是否是字符串
&lt;#list map?keys as item&gt;
	&lt;#if map[item]?is_string&gt;
		
		${map[item]}
	&lt;#else&gt;
		&lt;#list map[item] as p&gt;
			${p.name}#${p.url}#${p.saleNum}                      
		&lt;/#list&gt;
	&lt;/#if&gt;
&lt;/#list&gt;
-----------------------------------------
?is_enumerable:是否是集合
&lt;#list map?keys as item&gt;
	&lt;#if map[item]?is_enumerable&gt;
		&lt;#list map[item] as p&gt;
			${p.name}#${p.url}#${p.saleNum}                      
		&lt;/#list&gt;
	&lt;#else&gt;
		${map[item]}
	&lt;/#if&gt;
&lt;/#list&gt;
&lt;/body&gt;
&lt;/html&gt;

</code></pre>
<p>list模板内容测试用例：</p>
<pre><code class="language-java">@Test
	public void list() throws IOException, TemplateException {
		Map root = new HashMap();
		List wordList = new ArrayList();
		wordList.add(5);
		wordList.add(3);
		wordList.add(6);
		root.put(&quot;wordList&quot;, wordList);
		
		List&lt;Product&gt; productList = new ArrayList&lt;Product&gt;();
		productList.add(new Product(&quot;123.html&quot;, &quot;苹果&quot;, 5));
		productList.add(new Product(&quot;13.html&quot;, &quot;香蕉&quot;, 3));
		productList.add(new Product(&quot;13.html&quot;, &quot;芒果&quot;, 15));
		root.put(&quot;productList&quot;, productList);
		
		Map map = new HashMap();
		map.put(&quot;productMap&quot;, &quot;a&quot;);
		map.put(&quot;productMap2&quot;, &quot;b&quot;);
		map.put(&quot;productMap3&quot;, productList);
		root.put(&quot;map&quot;, map);
		
		initTemplate(&quot;list&quot;,root);
	}

</code></pre>
<p>list模板内容测试结果：</p>
<pre><code class="language-html">&lt;html&gt;
&lt;head&gt; 
  &lt;title&gt;list 指令介绍！&lt;/ title&gt; 
&lt;/head&gt; 
&lt;body&gt; 
	0
	1
	2
	3
	4
	5
-----------------------------
_index:交标值 ,?size 获取集合的长度
list的长度：3
	当前的交标是：0值是：5
	当前的交标是：1值是：3
	当前的交标是：2值是：6
--------------------------------
_has_next：是否是当前迭代循环中的最后一项
		不是最后一项：5,
                         
		不是最后一项：3,
                         
		是最后一项：6
	                         
---------------------------------
字符串（按首字母排序）,数字，日期值
正常遍历
	5                    
	3                    
	6                    
升序
	3                    
	5                    
	6                    
降序
	6                    
	5                    
	3                    
反向遍历
	6                    
	3                    
	5                    
 
-------------------------------------
正常遍历
	苹果#123.html#5                      
	香蕉#13.html#3                      
	芒果#13.html#15                      
升序
	香蕉#13.html#3                    
	苹果#123.html#5                    
	芒果#13.html#15                    
降序
	芒果#13.html#15                     
	苹果#123.html#5                     
	香蕉#13.html#3                     
反向遍历
	芒果#13.html#15                      
	香蕉#13.html#3                      
	苹果#123.html#5                      
---------------------------------------
		a
		b
			苹果#123.html#5                      
			香蕉#13.html#3                      
			芒果#13.html#15                      
----------------------------------------
		
		a
		
		b
			苹果#123.html#5                      
			香蕉#13.html#3                      
			芒果#13.html#15                      
-----------------------------------------
		a
		b
			苹果#123.html#5                      
			香蕉#13.html#3                      
			芒果#13.html#15                      
&lt;/body&gt;
&lt;/html&gt;

</code></pre>
<p><a name="LuI8o"></a></p>
<h2 id="6-freemarker-assign指令">6 freemarker assign指令</h2>
<p>我们可以通过 assign指令在ftl中进行值的定义<br />assign指令测试模板内容：</p>
<pre><code class="language-html">&lt;#assign name=&quot;zhuoqianmingyue&quot;&gt;
${name}
-----------------------------------------------------------
&lt;#assign product={&quot;name&quot;:&quot;苹果&quot;,&quot;url&quot;:&quot;123.html&quot;,&quot;saleNum&quot;:23} &gt;
${product.name},${product.url}，${product.saleNum}

</code></pre>
<p>assign指令测试用例：</p>
<pre><code class="language-java">@Test
	public void assign() throws IOException, TemplateException {
		Map root = new HashMap();
		initTemplate(&quot;assign&quot;,root);
	}
</code></pre>
<p>assign指令测试结果：</p>
<p><img src="https://cdn.nlark.com/yuque/0/2019/png/196377/1559814462614-06878373-0756-4619-a950-78adc020ae68.png#align=left&amp;display=inline&amp;height=106&amp;originHeight=106&amp;originWidth=688&amp;size=0&amp;status=done&amp;width=688" alt=""></p>
<p><a name="bV9nj"></a></p>
<h2 id="7-创建宏">7 创建宏</h2>
<p>这里的宏 我们可以理解成创建方法。我们可以通过 &lt;#macro&gt;标签来定义宏。<br />创建宏模板内容如下<br /><img src="https://cdn.nlark.com/yuque/0/2019/png/196377/1559814485637-23139595-7df2-4fba-8948-76501f2165aa.png#align=left&amp;display=inline&amp;height=119&amp;originHeight=119&amp;originWidth=305&amp;size=0&amp;status=done&amp;width=305" alt=""><br /><img src="https://cdn.nlark.com/yuque/0/2019/png/196377/1559814485648-cae23d5e-e9de-48c0-9397-d07ed9c3681c.png#align=left&amp;display=inline&amp;height=120&amp;originHeight=120&amp;originWidth=291&amp;size=0&amp;status=done&amp;width=291" alt=""><br />创建宏模板测试用例：</p>
<pre><code class="language-java">@Test
	public void marco() throws IOException, TemplateException {
		Map map = new HashMap();
		initTemplate(&quot;macroShow&quot;, map);
	}
</code></pre>
<p>创建宏模板测试结果： <br /><img src="https://cdn.nlark.com/yuque/0/2019/png/196377/1559814519430-64ef3d71-86f6-4239-8552-30bb9dda0edb.png#align=left&amp;display=inline&amp;height=98&amp;originHeight=98&amp;originWidth=313&amp;size=0&amp;status=done&amp;width=313" alt=""><br />嵌套指令&lt;#nested&gt; 可以执行两次相同的调用<br /><img src="https://cdn.nlark.com/yuque/0/2019/png/196377/1559814519419-3b924eb0-900b-4c88-8bfa-6687db0d09c3.png#align=left&amp;display=inline&amp;height=136&amp;originHeight=136&amp;originWidth=278&amp;size=0&amp;status=done&amp;width=278" alt=""><br /><img src="https://cdn.nlark.com/yuque/0/2019/png/196377/1559814519482-3bc93d8d-19b8-478b-89ad-11fa85513850.png#align=left&amp;display=inline&amp;height=134&amp;originHeight=134&amp;originWidth=378&amp;size=0&amp;status=done&amp;width=378" alt=""></p>
<pre><code class="language-java">@Test
	public void nested() throws IOException, TemplateException {
		Map map = new HashMap();
		initTemplate(&quot;nestedShow&quot;, map);
	}
</code></pre>
<p><img src="https://cdn.nlark.com/yuque/0/2019/png/196377/1559814554202-388f545b-77d9-491e-b34d-5037dbc93a7f.png#align=left&amp;display=inline&amp;height=104&amp;originHeight=104&amp;originWidth=248&amp;size=0&amp;status=done&amp;width=248" alt=""></p>
<p><a name="9nmEY"></a></p>
<h2 id="8-include指令">8 include指令</h2>
<p>include引入的文件内容freemarker将解析其中的freemarker语法并移交给模板，同时assign的值可以互相调用<br />include 引入ftl模板<br />parent.ftl</p>
<pre><code class="language-html">&lt;html&gt;
&lt;body&gt;
我是公共的页面 ${who}引用啦我!
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>include.ftl</p>
<pre><code class="language-html">我是include页面
&lt;#assign who=&quot;include.ftl&quot;&gt;
&lt;#include &quot;parent.ftl&quot;/&gt;
</code></pre>
<p>include指令的测试结果：</p>
<p><img src="https://cdn.nlark.com/yuque/0/2019/png/196377/1559814619013-47cbf9b3-1197-40cc-88e0-201fc4a6e75a.png#align=left&amp;display=inline&amp;height=159&amp;originHeight=159&amp;originWidth=420&amp;size=0&amp;status=done&amp;width=420" alt=""><br />include 引入html<br />在resource 目录下创建include.html<br /> <img src="https://cdn.nlark.com/yuque/0/2019/png/196377/1559814644207-e1f28a5c-cd0b-4201-bab6-c2fdd10e4616.png#align=left&amp;display=inline&amp;height=240&amp;originHeight=240&amp;originWidth=445&amp;size=0&amp;status=done&amp;width=445" alt=""><br />模板内容：<br /><img src="https://cdn.nlark.com/yuque/0/2019/png/196377/1559814644189-b55a0b9b-4d3b-4d68-8267-7747765d7e7a.png#align=left&amp;display=inline&amp;height=119&amp;originHeight=119&amp;originWidth=332&amp;size=0&amp;status=done&amp;width=332" alt=""><br />测试用例：</p>
<pre><code class="language-java">@Test
	public void include2() throws IOException, TemplateException {
		Map map = new HashMap();
		initTemplate(&quot;include2&quot;, map);
	}
</code></pre>
<p>测试结果：<br /><img src="https://cdn.nlark.com/yuque/0/2019/png/196377/1559814676554-eb9ff76a-82cd-4937-a874-e226b715b127.png#align=left&amp;display=inline&amp;height=235&amp;originHeight=235&amp;originWidth=397&amp;size=0&amp;status=done&amp;width=397" alt="">
<a name="ai1ig"></a></p>
<h2 id="9-import指令">9 import指令</h2>
<p>import引入的文件内容freemarker将不会解析其中的freemarker语法，同时assign的值可以可以互相调用。他可以创建一个命名空间 通过该命名调用import 模板中的变量和宏<br /><img src="https://cdn.nlark.com/yuque/0/2019/png/196377/1559814697825-a8b7badd-d51e-4ccf-96b1-584a254af1ec.png#align=left&amp;display=inline&amp;height=93&amp;originHeight=93&amp;originWidth=274&amp;size=0&amp;status=done&amp;width=274" alt=""></p>
<p><img src="https://cdn.nlark.com/yuque/0/2019/png/196377/1559814697830-37afe7c0-c2cb-4d6e-9c46-36894826e431.png#align=left&amp;display=inline&amp;height=132&amp;originHeight=132&amp;originWidth=318&amp;size=0&amp;status=done&amp;width=318" alt=""><br /><img src="https://cdn.nlark.com/yuque/0/2019/png/196377/1559814697834-4be38d83-8c80-458a-be15-4ca3b2fcda98.png#align=left&amp;display=inline&amp;height=137&amp;originHeight=137&amp;originWidth=397&amp;size=0&amp;status=done&amp;width=397" alt=""></p>
<pre><code class="language-java">@Test
	public void importFun() throws IOException, TemplateException {
		Map map = new HashMap();
		initTemplate(&quot;importFun&quot;, map);
	}
</code></pre>
<p><img src="https://cdn.nlark.com/yuque/0/2019/png/196377/1559814729133-39821a3a-1f79-4712-8dee-24d696096c6e.png#align=left&amp;display=inline&amp;height=102&amp;originHeight=102&amp;originWidth=364&amp;size=0&amp;status=done&amp;width=364" alt=""><br />import 使用宏<br /><img src="https://cdn.nlark.com/yuque/0/2019/png/196377/1559814729147-b6039c87-ddc8-4a03-b92c-fbc60fb65914.png#align=left&amp;display=inline&amp;height=93&amp;originHeight=93&amp;originWidth=271&amp;size=0&amp;status=done&amp;width=271" alt=""><br /><img src="https://cdn.nlark.com/yuque/0/2019/png/196377/1559814729181-3b57eae9-6aa3-45a0-b4aa-f42bb2837c08.png#align=left&amp;display=inline&amp;height=105&amp;originHeight=105&amp;originWidth=339&amp;size=0&amp;status=done&amp;width=339" alt=""></p>
<pre><code class="language-java">@Test
	public void macroImportShow() throws IOException, TemplateException {
		Map map = new HashMap();
		initTemplate(&quot;macroImportShow&quot;, map);
	}

</code></pre>
<p><img src="https://cdn.nlark.com/yuque/0/2019/png/196377/1559814756073-b735d8c2-46a2-417b-a06d-a28fbe3a8120.png#align=left&amp;display=inline&amp;height=117&amp;originHeight=117&amp;originWidth=362&amp;size=0&amp;status=done&amp;width=362" alt=""></p>
<p><a name="5AMZz"></a></p>
<h2 id="10-freemarker-处理不存在或则为null的值">10 freemarker 处理不存在或则为null的值</h2>
<p>当数据模型的key不存在或者key 的value是null 时 我们执行模板引擎进行渲染的化或报如下图的错误<br /><img src="https://cdn.nlark.com/yuque/0/2019/png/196377/1559815678261-8789786c-31f2-47f7-8f7a-9787427f9a25.png#align=left&amp;display=inline&amp;height=93&amp;originHeight=93&amp;originWidth=698&amp;size=0&amp;status=done&amp;width=698" alt=""><br />我们可以通过在flt页面中使用！ 或者 ?if_exists 使其不做任何显示 通过我们也可以通过 ?if_exists 和??指令进行是否为空的判断。<br />测试模板内容：</p>
<pre><code class="language-html">
${word!}
${word?if_exists}
${product?if_exists.name?if_exists}
 
&lt;#if word??&gt;
&lt;#else&gt;
	word的值为空
&lt;/#if&gt;
&lt;#if word?if_exists&gt;
&lt;#else&gt;
	word的值为空
&lt;/#if&gt;
</code></pre>
<p>测试用例：</p>
<pre><code class="language-java">@Test
	public void ifExists() throws IOException, TemplateException {
		Map root = new HashMap();
		String word = null;
		root.put(&quot;word&quot;, word);
		
		Product product = new Product();
		product.setName(null);
		root.put(&quot;product&quot;, product);
		
		initTemplate(&quot;ifExists&quot;,root);
	}

</code></pre>
<p>测试结果： <br /><img src="https://cdn.nlark.com/yuque/0/2019/png/196377/1559814877083-f7111bc6-54e9-4c07-87e9-7cc13669a078.png#align=left&amp;display=inline&amp;height=190&amp;originHeight=190&amp;originWidth=294&amp;size=0&amp;status=done&amp;width=294" alt="">
<a name="EIIyB"></a></p>
<h2 id="11-freemarker-内置函数">11 freemarker  内置函数</h2>
<p>具体请参考：<a href="https://freemarker.apache.org/docs/ref_builtins.html">https://freemarker.apache.org/docs/ref_builtins.html</a><br />我们这里介绍一下经常使用的内置函数 ,我们上面在介绍list的时候 使用的 ?size就只一个内置函数
<a name="r5RtG"></a></p>
<h3 id="111字符串">11.1字符串</h3>
<ul>
<li>？length ：字符串的长度 例如：${&quot;zhuoqianmingyue&quot;?length}</li>
<li>？index_of ：字符串中字符的位置交标 例如：${&quot;zhuoqianmingyue&quot;?index_of('yue')}</li>
<li>？substring：截取字符串 例如：${&quot;zhuoqianmingyue&quot;?substring(1)} ${&quot;zhuoqianmingyue&quot;?substring(1,2)}</li>
<li>？trim：去掉字符串的空格 例如：${&quot; Hello world &quot;?trim}</li>
<li>？contains：是否包含否个字符 例如：${&quot;Hello world &quot;?contains('Hello')?string}</li>
<li>?date：日期的转换  ，?datetime datetime的转换</li>
<li>&lt;#assign date1=&quot;2009-10-12&quot;?date(&quot;yyyy-MM-dd&quot;)&gt;</li>
<li>&lt;#assign date2=&quot;09:28:20&quot;?datetime(&quot;HH:mm:ss&quot;)&gt;</li>
<li>?string：字符串格式输出 例如：${date1?string}</li>
<li>？is_string：是否是字符串 例如：${date1?is_string?string}</li>
</ul>
<p>以上语法模板内容</p>
<pre><code class="language-html">length: ${&quot;zhuoqianmingyue&quot;?length}
index_of: ${&quot;zhuoqianmingyue&quot;?index_of('yue')}
substring: ${&quot;zhuoqianmingyue&quot;?substring(1)} ${&quot;zhuoqianmingyue&quot;?substring(1,2)}
trim: ${&quot; Hello world &quot;?trim}
contains:${&quot;Hello world &quot;?contains('Hello')?string}
 
&lt;#assign date1=&quot;2009-10-12&quot;?date(&quot;yyyy-MM-dd&quot;)&gt;
&lt;#assign date2=&quot;09:28:20&quot;?datetime(&quot;HH:mm:ss&quot;)&gt;
${date1?is_string?string}
${date1?string}
${date2?string}

</code></pre>
<p>测试用例：</p>
<pre><code class="language-java">@Test
	public void string() throws IOException, TemplateException {
		Map map = new HashMap();
		initTemplate(&quot;string&quot;, map);
	}
</code></pre>
<p>测试结果：<br /><img src="https://cdn.nlark.com/yuque/0/2019/png/196377/1559815174137-311cfa12-32d3-4dab-835c-3d09ce0b3aa0.png#align=left&amp;display=inline&amp;height=210&amp;originHeight=210&amp;originWidth=386&amp;size=0&amp;status=done&amp;width=386" alt=""></p>
<p><a name="X6JfJ"></a></p>
<h3 id="112-日期">11.2 日期</h3>
<p>.now 获取当前时间<br />日期格式转换</p>
<pre><code class="language-html">&lt;#assign aDateTime = .now&gt;
${.now}
${aDateTime?string[&quot;dd.MM.yyyy, HH:mm&quot;]}
${aDateTime?string[&quot;EEEE, MMMM dd, yyyy, hh:mm a '('zzz')'&quot;]}
${aDateTime?string[&quot;EEE, MMM d, ''yy&quot;]}
${aDateTime?string.yyyy}

</code></pre>
<pre><code class="language-java">@Test
	public void date() throws IOException, TemplateException {
		Map map = new HashMap();
		initTemplate(&quot;date&quot;, map);
	}
</code></pre>
<p><img src="https://cdn.nlark.com/yuque/0/2019/png/196377/1559815251148-60ceb836-63f7-4bb6-9703-048f5209e62e.png#align=left&amp;display=inline&amp;height=152&amp;originHeight=152&amp;originWidth=455&amp;size=0&amp;status=done&amp;width=455" alt=""></p>
<p><a name="DmnUL"></a></p>
<h3 id="113-序列-sequence">11.3 序列 （Sequence）</h3>
<ul>
<li>？size ?reverse ?sort ?sort_by 我们已经在list 指令进行了演示 这里就不在做介绍了</li>
<li>?chunk:序列分块遍历</li>
<li>？first ？last：获取序列中的第一个和最后一个元素</li>
<li>？join：拼接序列中的内容</li>
<li>？seq_contains：序列中是否包含某个元素</li>
<li>？seq_index_of：序列中元素的交标</li>
</ul>
<pre><code class="language-html">&lt;#assign seq = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']&gt;
 
&lt;#list seq?chunk(4) as row&gt;
  &lt;#list row as cell&gt;${cell} &lt;/#list&gt;
&lt;/#list&gt;
 
&lt;#list seq?chunk(4, '-') as row&gt;
  &lt;#list row as cell&gt;${cell} &lt;/#list&gt;
&lt;/#list&gt;
---------------------------------------------
 ${seq[1]} 
 ${seq?first}  ${seq?last} 
 ----------------------------------------------
 &lt;#assign colors = [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;]&gt;
 ${colors?join(&quot;, &quot;)}
 ---------------------------------------------
&lt;#assign x = [&quot;red&quot;, 16, &quot;blue&quot;, &quot;cyan&quot;]&gt;
&quot;blue&quot;: ${x?seq_contains(&quot;blue&quot;)?string(&quot;yes&quot;, &quot;no&quot;)}
&quot;yellow&quot;: ${x?seq_contains(&quot;yellow&quot;)?string(&quot;yes&quot;, &quot;no&quot;)}
16: ${x?seq_contains(16)?string(&quot;yes&quot;, &quot;no&quot;)}
&quot;16&quot;: ${x?seq_contains(&quot;16&quot;)?string(&quot;yes&quot;, &quot;no&quot;)}
-------------------------------------------------
&lt;#assign colors = [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;]&gt;
${colors?seq_index_of(&quot;blue&quot;)}
${colors?seq_index_of(&quot;red&quot;)}
${colors?seq_index_of(&quot;purple&quot;)}

</code></pre>
<p>测试用例：</p>
<pre><code class="language-java">@Test
	public void sequences() throws IOException, TemplateException {
		Map map = new HashMap();
		initTemplate(&quot;sequences&quot;, map);
	}
</code></pre>
<p><img src="https://cdn.nlark.com/yuque/0/2019/png/196377/1559815340484-019624e3-5d8b-4246-b04e-157060dedc29.png#align=left&amp;display=inline&amp;height=443&amp;originHeight=443&amp;originWidth=517&amp;size=0&amp;status=done&amp;width=517" alt=""><br /><img src="https://cdn.nlark.com/yuque/0/2019/png/196377/1559815348735-bc0d6c98-9a0f-49f5-9389-defae3d185bc.png#align=left&amp;display=inline&amp;height=443&amp;originHeight=443&amp;originWidth=517&amp;size=0&amp;status=done&amp;width=517" alt="">
<a name="p4fba"></a></p>
<h3 id="114-数字">11.4 数字：</h3>
<ul>
<li>abs：绝对值    2.3.20</li>
<li>round:四舍五入</li>
<li>floor:向下取整</li>
<li>ceiling:向上取整</li>
<li>string.number：整数数字输出</li>
<li>string.currency：货币格式输出</li>
<li>string.percent：百分数格式输出</li>
</ul>
<p></p>
<ul>
<li>?string[&quot;0.##&quot;]：数字显示2为小数</li>
<li>?string[&quot;000.00&quot;]：小数左面不够0补齐</li>
</ul>
<pre><code class="language-html">${-5?abs}
${4.5?round} ${4.4?round}
${4.5?floor} ${4.5?ceiling}
 
&lt;#assign x = 42&gt; 
${x} 
${x?string}
${x?string.number} 
${x?string.currency} 
${x?string.percent} 
 
${1.2345?string[&quot;0.##&quot;]}
${1.2345?string[&quot;000.00&quot;]}

</code></pre>
<pre><code class="language-java">@Test
	public void number() throws IOException, TemplateException {
		Map map = new HashMap();
		initTemplate(&quot;number&quot;, map);
	}
</code></pre>
<p><img src="https://cdn.nlark.com/yuque/0/2019/png/196377/1559815442183-743cd19b-fb67-4330-8823-6e70dc022258.png#align=left&amp;display=inline&amp;height=283&amp;originHeight=283&amp;originWidth=347&amp;size=0&amp;status=done&amp;width=347" alt="">
<a name="8TBUv"></a></p>
<h3 id="115-has_api">11.5 has_api</h3>
<p>下面的内置函数返回的结果都是布尔型的</p>
<ul>
<li>is_string ：是否是String</li>
<li>is_number :是否是数字</li>
<li>is_boolean ：是否是布尔类型</li>
<li>is_date ：是否是日期</li>
<li>is_macro ：是否是宏</li>
<li>is_sequence：是否是序列</li>
</ul>
<p><br />作者：IT乌托邦-桌前明月  <br />来源：CSDN  <br />原文：https://blog.csdn.net/ljk126wy/article/details/82978442  <br />版权声明：本文为博主原创文章，转载请附上博文链接！</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SpringBoot Thymeleaf使用教程（实用版）]]></title>
        <id>https://liujinhua306.github.io/post/thymeleaf</id>
        <link href="https://liujinhua306.github.io/post/thymeleaf">
        </link>
        <updated>2019-06-26T06:21:06.000Z</updated>
        <content type="html"><![CDATA[<p>使用Thymeleaf 三大理由：</p>
<blockquote>
<ol>
<li>简洁漂亮 容易理解</li>
<li>完美支持HTML5 使用浏览器直接打开页面</li>
<li>不新增标签 只需增强属性</li>
</ol>
</blockquote>
<p><a name="yYdxQ"></a></p>
<h1 id="学习目标">学习目标</h1>
<ul>
<li>快速掌握Thymeleaf的基本使用（五大基础语法+常用内置对象）
<a name="SFQlm"></a></li>
</ul>
<h1 id="快速查阅">快速查阅</h1>
<p>专题阅读：<a href="https://www.jianshu.com/p/964370d9374e">《SpringBoot 布道系列》</a><br />源码下载：<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fyizhiwazi%2Fspringboot-socks%2Ftree%2Fmaster%2Fspringboot-web-thymeleaf-enhance">springboot-web-thymeleaf-enhance</a><br />— Hey Man，Don't forget to Star or Fork . —<br />官方指南：<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.thymeleaf.org%2Fdoc%2Ftutorials%2F3.0%2Fusingthymeleaf.html"> Thymleaf 3.0 官方教程</a><br />相关教程：<a href="https://www.jianshu.com/p/8dc48fa74e7e">SpringBoot Thymeleaf 基本介绍</a> 、 <a href="https://www.jianshu.com/p/f658fed35786">SpringBoot 在IDEA中实现热部署(实用版)</a>
<a name="rw1hQ"></a></p>
<h1 id="使用教程">使用教程</h1>
<blockquote>
<p><code>温馨提示：Thymeleaf 最为显著的特征是增强属性，任何属性都可以通过th:xx 来完成交互，例如th:value最终会覆盖value属性。</code></p>
</blockquote>
<p><a name="vGqRP"></a></p>
<h2 id="一-基础语法">一、基础语法</h2>
<p><a name="pzWqN"></a></p>
<h3 id="变量表达式">变量表达式  <code>${}</code></h3>
<p>使用方法：直接使用<code>th:xx = &quot;${}&quot;</code> 获取对象属性 。例如：</p>
<pre><code class="language-html">&lt;form id=&quot;userForm&quot;&gt;
    &lt;input id=&quot;id&quot; name=&quot;id&quot; th:value=&quot;${user.id}&quot;/&gt;
    &lt;input id=&quot;username&quot; name=&quot;username&quot; th:value=&quot;${user.username}&quot;/&gt;
    &lt;input id=&quot;password&quot; name=&quot;password&quot; th:value=&quot;${user.password}&quot;/&gt;
&lt;/form&gt;
&lt;div th:text=&quot;hello&quot;&gt;&lt;/div&gt;
&lt;div th:text=&quot;${user.username}&quot;&gt;&lt;/div&gt;
</code></pre>
<p><a name="QhdlY"></a></p>
<h3 id="选择变量表达式">选择变量表达式 <code>*{}</code></h3>
<p>使用方法：首先通过<code>th:object</code> 获取对象，然后使用<code>th:xx = &quot;*{}&quot;</code>获取对象属性。<br />这种简写风格极为清爽，推荐大家在实际项目中使用。 例如：</p>
<pre><code class="language-html">&lt;form id=&quot;userForm&quot; th:object=&quot;${user}&quot;&gt;
    &lt;input id=&quot;id&quot; name=&quot;id&quot; th:value=&quot;*{id}&quot;/&gt;
    &lt;input id=&quot;username&quot; name=&quot;username&quot; th:value=&quot;*{username}&quot;/&gt;
    &lt;input id=&quot;password&quot; name=&quot;password&quot; th:value=&quot;*{password}&quot;/&gt;
&lt;/form&gt;
</code></pre>
<p><a name="3kVQ0"></a></p>
<h3 id="链接表达式">链接表达式 <code>@{}</code></h3>
<p>使用方法：通过链接表达式<code>@{}</code>直接拿到应用路径，然后拼接静态资源路径。例如：</p>
<pre><code class="language-javascript">&lt;script th:src=&quot;@{/webjars/jquery/jquery.js}&quot;&gt;&lt;/script&gt;
&lt;link th:href=&quot;@{/webjars/bootstrap/css/bootstrap.css}&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;
</code></pre>
<p><a name="242Wc"></a></p>
<h3 id="片段表达式-~">片段表达式 <code>~{}</code></h3>
<p>片段表达式是Thymeleaf的特色之一，细粒度可以达到标签级别，这是JSP无法做到的。<br />片段表达式拥有三种语法：</p>
<ul>
<li><code>~{ viewName } 表示引入完整页面</code></li>
<li><code>~{ viewName ::selector} 表示在指定页面寻找片段 其中selector可为片段名、jquery选择器等</code></li>
<li><code>~{ ::selector} 表示在当前页寻找</code></li>
</ul>
<p>使用方法：首先通过<code>th:fragment</code>定制片段 ，然后通过<code>th:replace</code> 填写片段路径和片段名。例如：</p>
<pre><code class="language-html">&lt;!-- /views/common/head.html--&gt;
&lt;head th:fragment=&quot;static&quot;&gt;
        &lt;script th:src=&quot;@{/webjars/jquery/3.3.1/jquery.js}&quot;&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;!-- /views/your.html --&gt;
&lt;div th:replace=&quot;~{common/head::static}&quot;&gt;&lt;/div&gt;
</code></pre>
<p>在实际使用中，我们往往使用更简洁的表达，去掉表达式外壳直接填写片段名。例如：</p>
<pre><code class="language-html">&lt;!-- your.html --&gt;
&lt;div th:replace=&quot;common/head::static&quot;&gt;&lt;/div&gt;
</code></pre>
<p>值得注意的是，使用替换路径<code>th:replace</code> 开头请勿添加斜杠，避免部署运行的时候出现路径报错。（因为默认拼接的路径为<code>spring.thymeleaf.prefix = classpath:/templates/</code>）
<a name="RPDra"></a></p>
<h3 id="消息表达式">消息表达式</h3>
<p>即通常的国际化属性：<code>#{msg}</code>  用于获取国际化语言翻译值。例如：</p>
<pre><code class="language-html">&lt;title th:text=&quot;#{user.title}&quot;&gt;&lt;/title&gt;
</code></pre>
<p><a name="opd9m"></a></p>
<h3 id="其它表达式">其它表达式</h3>
<p>在基础语法中，默认支持字符串连接、数学运算、布尔逻辑和三目运算等。例如：</p>
<pre><code class="language-html">&lt;input name=&quot;name&quot; th:value=&quot;${'I am '+(user.name!=null?user.name:'NoBody')}&quot;/&gt;
</code></pre>
<p><a name="wdsjr"></a></p>
<h2 id="二-内置对象">二、内置对象</h2>
<blockquote>
<p>官方文档：<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.thymeleaf.org%2Fdoc%2Ftutorials%2F3.0%2Fusingthymeleaf.html%23appendix-a-expression-basic-objects"> 附录A： Thymeleaf 3.0 基础对象</a>
官方文档：<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.thymeleaf.org%2Fdoc%2Ftutorials%2F3.0%2Fusingthymeleaf.html%23appendix-b-expression-utility-objects"> 附录B： Thymeleaf 3.0 工具类 </a></p>
</blockquote>
<p><a name="cIFfJ"></a></p>
<h3 id="七大基础对象">七大基础对象：</h3>
<ul>
<li><code>${#ctx}</code> 上下文对象，可用于获取其它内置对象。</li>
<li><code>${#vars}</code>:    上下文变量。</li>
<li><code>${#locale}</code>：上下文区域设置。</li>
<li><code>${#request}</code>: HttpServletRequest对象。</li>
<li><code>${#response}</code>: HttpServletResponse对象。</li>
<li><code>${#session}</code>: HttpSession对象。</li>
<li><code>${#servletContext}</code>:  ServletContext对象。
<a name="oiqCt"></a></li>
</ul>
<h3 id="常用的工具类">常用的工具类：</h3>
<ul>
<li><code>#strings</code>：字符串工具类</li>
<li><code>#lists</code>：List 工具类</li>
<li><code>#arrays</code>：数组工具类</li>
<li><code>#sets</code>：Set 工具类</li>
<li><code>#maps</code>：常用Map方法。</li>
<li><code>#objects</code>：一般对象类，通常用来判断非空</li>
<li><code>#bools</code>：常用的布尔方法。</li>
<li><code>#execInfo</code>：获取页面模板的处理信息。</li>
<li><code>#messages</code>：在变量表达式中获取外部消息的方法，与使用＃{...}语法获取的方法相同。</li>
<li><code>#uris</code>：转义部分URL / URI的方法。</li>
<li><code>#conversions</code>：用于执行已配置的转换服务的方法。</li>
<li><code>#dates</code>：时间操作和时间格式化等。</li>
<li><code>#calendars</code>：用于更复杂时间的格式化。</li>
<li><code>#numbers</code>：格式化数字对象的方法。</li>
<li><code>#aggregates</code>：在数组或集合上创建聚合的方法。</li>
<li><code>#ids</code>：处理可能重复的id属性的方法。
<a name="NJOm0"></a></li>
</ul>
<h2 id="三-迭代循环">三、迭代循环</h2>
<p>想要遍历<code>List</code>集合很简单，配合<code>th:each</code> 即可快速完成迭代。例如遍历用户列表：</p>
<pre><code class="language-html">&lt;div th:each=&quot;user:${userList}&quot;&gt;
    账号：&lt;input th:value=&quot;${user.username}&quot;/&gt;
    密码：&lt;input th:value=&quot;${user.password}&quot;/&gt;
&lt;/div&gt;
</code></pre>
<p>在集合的迭代过程还可以获取状态变量，只需在变量后面指定状态变量名即可，状态变量可用于获取集合的下标/序号、总数、是否为单数/偶数行、是否为第一个/最后一个。例如：</p>
<pre><code class="language-html">&lt;div th:each=&quot;user,stat:${userList}&quot; th:class=&quot;${stat.even}?'even':'odd'&quot;&gt;
    下标：&lt;input th:value=&quot;${stat.index}&quot;/&gt;
    序号：&lt;input th:value=&quot;${stat.count}&quot;/&gt;
    账号：&lt;input th:value=&quot;${user.username}&quot;/&gt;
    密码：&lt;input th:value=&quot;${user.password}&quot;/&gt;
&lt;/div&gt;
</code></pre>
<p>如果缺省状态变量名，则迭代器会默认帮我们生成以变量名开头的状态变量 <code>xxStat</code>， 例如：</p>
<pre><code class="language-html">&lt;div th:each=&quot;user:${userList}&quot; th:class=&quot;${userStat.even}?'even':'odd'&quot;&gt;
    下标：&lt;input th:value=&quot;${userStat.index}&quot;/&gt;
    序号：&lt;input th:value=&quot;${userStat.count}&quot;/&gt;
    账号：&lt;input th:value=&quot;${user.username}&quot;/&gt;
    密码：&lt;input th:value=&quot;${user.password}&quot;/&gt;
&lt;/div&gt;
</code></pre>
<p><a name="e0zLO"></a></p>
<h2 id="四-条件判断">四、条件判断</h2>
<p>条件判断通常用于动态页面的初始化，例如：</p>
<pre><code class="language-html">&lt;div th:if=&quot;${userList}&quot;&gt;
    &lt;div&gt;的确存在..&lt;/div&gt;
&lt;/div&gt;
</code></pre>
<p>如果想取反则使用unless 例如：</p>
<pre><code class="language-html">&lt;div th:unless=&quot;${userList}&quot;&gt;
    &lt;div&gt;不存在..&lt;/div&gt;
&lt;/div&gt;
</code></pre>
<p><a name="ov0ko"></a></p>
<h2 id="五-日期格式化">五、日期格式化</h2>
<p>使用默认的日期格式(toString方法) 并不是我们预期的格式：<code>Mon Dec 03 23:16:50 CST 2018</code></p>
<pre><code class="language-html">&lt;input type=&quot;text&quot; th:value=&quot;${user.createTime}&quot;/&gt;
</code></pre>
<p>此时可以通过时间工具类<code>#dates</code>来对日期进行格式化：<code>2018-12-03 23:16:50</code></p>
<pre><code class="language-html">&lt;input type=&quot;text&quot; th:value=&quot;${#dates.format(user.createTime,'yyyy-MM-dd HH:mm:ss')}&quot;/&gt;
</code></pre>
<p><a name="a37Ga"></a></p>
<h2 id="六-内联写法">六、内联写法</h2>
<ul>
<li>（1）为什么要使用内联写法？·答：因为 JS无法获取服务端返回的变量。<br /></li>
<li>（2）如何使用内联表达式？答：标准格式为：<code>[[${xx}]]</code> ，可以读取服务端变量，也可以调用内置对象的方法。例如获取用户变量和应用路径：<br /></li>
</ul>
<pre><code class="language-html">&lt;script th:inline=&quot;javascript&quot;&gt;
        var user = [[${user}]];`
        var APP_PATH = [[${#request.getContextPath()}]];
        var LANG_COUNTRY = [[${#locale.getLanguage()+'_'+#locale.getCountry()}]];
    &lt;/script&gt;
</code></pre>
<ul>
<li>（3）标签引入的JS里面能使用内联表达式吗？答：不能！内联表达式仅在页面生效，因为<code>Thymeleaf</code>只负责解析一级视图，不能识别外部标签JS里面的表达式。
<a name="wLSXW"></a></li>
</ul>
<h2 id="七-国际化">七、国际化</h2>
<blockquote>
<p>需要了解更多关于国际化的精彩描述请前往 <a href="https://www.jianshu.com/p/e2eae08f3255">SpringBoot 快速实现国际化i18n</a> 。</p>
</blockquote>
<p>例如在国际化文件中编写了user.title这个键值，然后使用<code>#{}</code>读取这个KEY即可获取翻译。</p>
<pre><code class="language-html">&lt;title th:text=&quot;#{user.title}&quot;&gt;用户登陆&lt;/title&gt;
</code></pre>
<p><a name="HYbxp"></a></p>
<h2 id="八-详细教程">八、详细教程</h2>
<blockquote>
<p>======== 有了上述基础后 下面正式开始Thymeleaf 的详细教程 ==============</p>
</blockquote>
<p>首先通过<a href="https://www.jianshu.com/p/d2b08a671e27">Spring Initializr</a>创建项目，如图所示：<br /><img src="https://cdn.nlark.com/yuque/0/2019/png/196377/1560130930303-18c49d0a-80ad-4b00-99d0-316b4d39a6b1.png#align=left&amp;display=inline&amp;height=704&amp;name=image.png&amp;originHeight=704&amp;originWidth=702&amp;size=202803&amp;status=done&amp;width=702" alt="image.png"><br />然后在POM文件引入<code>web 、thymeleaf</code>等依赖：</p>
<pre><code class="language-xml">&lt;dependencies&gt;
        &lt;dependency&gt;&lt;!--Web相关依赖--&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;&lt;!--页面模板依赖--&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;&lt;!--热部署依赖--&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;
            &lt;scope&gt;runtime&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
</code></pre>
<p>然后在<code>src/main/resources/application.yml</code> 配置页面路径：</p>
<pre><code>spring:
  thymeleaf:
    cache: false #关闭缓存
    prefix: classpath:/views/ #调整页面路径
</code></pre>
<p>接着在<code>src/main/java/com/hehe/web/UserController</code> 获取用户信息:</p>
<pre><code class="language-java">@RestController
public class UserController {
    private List&lt;User&gt; userList = new ArrayList&lt;&gt;();
    {
        userList.add(new User(&quot;1&quot;, &quot;socks&quot;, &quot;123456&quot;, new Date()));
        userList.add(new User(&quot;2&quot;, &quot;admin&quot;, &quot;111111&quot;, new Date()));
        userList.add(new User(&quot;3&quot;, &quot;jacks&quot;, &quot;222222&quot;, null));
    }
    @GetMapping(&quot;/&quot;)
    public ModelAndView index() {
        return new ModelAndView(&quot;user/user&quot;, &quot;userList&quot;, userList);
    }
}
public class User {
    private String id;
    private String username;
    private String password;
    private Date createTime;
    //请读者自行补充 构造器和 get/set方法..
}
</code></pre>
<p>开始编写公共页面：<code>src/main/resources/views/common/head.html</code> ，其中<code>static</code>为页面片段：</p>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;
&lt;!--声明static为页面片段名称--&gt;
&lt;head th:fragment=&quot;static&quot;&gt;
    &lt;link th:href=&quot;@{/webjars/bootstrap/css/bootstrap.css}&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;/&gt;
    &lt;script th:src=&quot;@{/webjars/jquery/jquery.js}&quot;&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;/html&gt;
</code></pre>
<p>接着编写用户列表页：<code>src/main/resources/views/user/user.html</code> 配合<code>th:each</code>显示用户列表信息。<br />使用说明：这里 <code>th:replace=&quot;common/head::static&quot;</code> 表示将引用<code>${spring.thymeleaf.prefix}/common/head.html</code>的<code>static</code>页面片段，值得注意的是由于替换路径默认会拼接前缀路径，所以开头切勿在添加斜杠，否则在打包成JAR部署运行时将提示报<code>Templates not found...</code> 。</p>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;/&gt;
    &lt;title th:text=&quot;用户信息&quot;&gt;User&lt;/title&gt;
    &lt;!--默认拼接前缀路径,开头请勿再添加斜杠,防止部署运行报错！--&gt;
    &lt;script th:replace=&quot;common/head::static&quot;&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div th:each=&quot;user,userStat:${userList}&quot; th:class=&quot;${userStat.even}?'even':'odd'&quot;&gt;
    序号：&lt;input type=&quot;text&quot; th:value=&quot;${userStat.count}&quot;/&gt;
    账号：&lt;input type=&quot;text&quot; th:value=&quot;${user.username}&quot;/&gt;
    密码：&lt;input type=&quot;password&quot; th:value=&quot;${user.password}&quot;/&gt;
    时间：&lt;input type=&quot;text&quot; th:value=&quot;${user.createTime}&quot;/&gt;
    时间：&lt;input type=&quot;text&quot; th:value=&quot;${#dates.format(user.createTime,'yyyy-MM-dd HH:mm:ss')}&quot;/&gt;
&lt;/div&gt;
&lt;script th:inline=&quot;javascript&quot;&gt;
    //通过内联表达式获取用户信息
    var userList = [[${userList}]];
    console.log(userList)
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>然后编写单个用户页面：<br />至此大功告成，然后快速启动项目，如图所示：<br /><img src="https://cdn.nlark.com/yuque/0/2019/png/196377/1560131008803-a0bf25c3-4213-4c48-8c47-cd63c5ee7152.png#align=left&amp;display=inline&amp;height=202&amp;name=image.png&amp;originHeight=202&amp;originWidth=1041&amp;size=184694&amp;status=done&amp;width=1041" alt="image.png"><br />快速启动项目<br />然后访问用户列表： <a href="https://links.jianshu.com/go?to=http%3A%2F%2Flocalhost%3A8080">http://localhost:8080</a> ，如图所示：<br /><img src="https://cdn.nlark.com/yuque/0/2019/png/196377/1560131021484-d9a0f46b-e9c2-423a-bfba-1131341b0d8b.png#align=left&amp;display=inline&amp;height=115&amp;name=image.png&amp;originHeight=115&amp;originWidth=1040&amp;size=52156&amp;status=done&amp;width=1040" alt="image.png"><br />然后访问单个用户： <a href="https://links.jianshu.com/go?to=http%3A%2F%2Flocalhost%3A8080%2Fuser%2F1">http://localhost:8080/user/1</a> ，如图所示：<br /><img src="https://cdn.nlark.com/yuque/0/2019/png/196377/1560131035479-1dec870d-ba3a-4aa6-ac47-805cf77fdce9.png#align=left&amp;display=inline&amp;height=452&amp;name=image.png&amp;originHeight=452&amp;originWidth=1017&amp;size=39385&amp;status=done&amp;width=1017" alt="image.png"></p>
<p>作者：yizhiwazi<br />链接：https://www.jianshu.com/p/908b48b10702<br />来源：简书<br />简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java桥接模式(bridge)]]></title>
        <id>https://liujinhua306.github.io/post/bridge</id>
        <link href="https://liujinhua306.github.io/post/bridge">
        </link>
        <updated>2019-06-26T06:10:04.000Z</updated>
        <content type="html"><![CDATA[<p><a name="Iz1nV"></a></p>
<h1 id="桥接模式">桥接模式</h1>
<p><a name="lgPtP"></a></p>
<h2 id="1多层继承结构">1.多层继承结构</h2>
<blockquote>
<p>在现实生活中比如商城中以电脑为例来说，如何处理电脑销售分类的问题，我们可以使用<strong>多层继承结构</strong>实现这种场景</p>
</blockquote>
<p><img src="https://cdn.nlark.com/yuque/0/2019/png/196377/1560929833605-965b70b1-b2eb-465d-b12d-c90861f372b3.png#align=left&amp;display=inline&amp;height=470&amp;originHeight=470&amp;originWidth=472&amp;size=0&amp;status=done&amp;width=472" alt=""><br />问题
<a name="W2dVw"></a></p>
<h3 id="11扩展性问题">1.1扩展性问题</h3>
<ol>
<li>如果要增加一个新的扩展类型：智能手机，则要在每个品牌下增加一个新类</li>
<li>如果要新增加一个品牌，则这个品牌下要增加各个类型的电脑
<a name="QO2Oo"></a></li>
</ol>
<h3 id="12违反单一职责原则">1.2违反单一职责原则</h3>
<p>一个类有两个引起该类变化的因素。</p>
<p><a name="FccHP"></a></p>
<h2 id="2桥接模式实现">2.桥接模式实现</h2>
<p><a name="MkG62"></a></p>
<h3 id="21场景分析">2.1场景分析</h3>
<ol>
<li>商城系统中常见的商品分类，以电脑为类，如何良好的处理商品分类销售的问题?</li>
<li>这个场景中有两个变化的维度：电脑类型、电脑品牌 这个场景中有两个变化的维度：电脑类型、电脑品牌</li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2019/png/196377/1560929943900-a695abdd-dd9e-4137-8723-adefbda420d3.png#align=left&amp;display=inline&amp;height=551&amp;originHeight=551&amp;originWidth=1007&amp;size=0&amp;status=done&amp;width=1007" alt="">
<a name="Qugoz"></a></p>
<h3 id="22桥接模式核心要点">2.2桥接模式核心要点：</h3>
<p>处理多层继承结构，处理多维度变化的场景，将各个维度设计成独立的继承结构，使各个维度可以独立的扩展在抽象层建立关联。</p>
<p><img src="https://cdn.nlark.com/yuque/0/2019/png/196377/1560929968361-75d96178-419d-402f-aa89-4c15b237e7ba.png#align=left&amp;display=inline&amp;height=633&amp;originHeight=633&amp;originWidth=1118&amp;size=0&amp;status=done&amp;width=1118" alt="">
<a name="zAWAf"></a></p>
<h2 id="3代码实现">3.代码实现</h2>
<p>品牌类</p>
<pre><code class="language-java">/**
 * 品牌
 * @author Administrator
 *
 */
public interface Brand {
	void sale();
}

class Lenovo implements Brand {

	@Override
	public void sale() {
		System.out.println(&quot;销售联想电脑&quot;);
	}
	
}

class Dell implements Brand {
	
	@Override
	public void sale() {
		System.out.println(&quot;销售Dell电脑&quot;);
	}
	
}

class Shenzhou implements Brand {
	
	@Override
	public void sale() {
		System.out.println(&quot;销售神舟电脑&quot;);
	}
	
}

</code></pre>
<p>电脑维度，也就是桥接类</p>
<pre><code class="language-java">/**
 * 电脑类型的维度
 * @author Administrator
 *
 */
public class Computer2 {
	
	protected Brand brand;
	
	public Computer2(Brand b) {
		this.brand = b;
	}
	
	public void sale(){
		brand.sale();
	}
	
}

class Desktop2 extends Computer2 {

	public Desktop2(Brand b) {
		super(b);
	}
	
	@Override
	public void sale() {
		super.sale();
		System.out.println(&quot;销售台式机&quot;);
	}
}

class Laptop2 extends Computer2 {
	
	public Laptop2(Brand b) {
		super(b);
	}
	
	@Override
	public void sale() {
		super.sale();
		System.out.println(&quot;销售笔记本&quot;);
	}
}


</code></pre>
<p>测试类</p>
<pre><code class="language-java">public class Client {
	public static void main(String[] args) {
		//销售联想的笔记本电脑
		Computer2  c = new Laptop2(new Lenovo());
		c.sale();
		//销售神舟的台式机
		Computer2 c2 = new Desktop2(new Shenzhou());
		c2.sale();
	}
}

</code></pre>
<p><a name="lmt9T"></a></p>
<h2 id="4桥接模式总结">4.桥接模式总结</h2>
<ol>
<li>桥接模式可以取代多层继承的方案。 多层继承违背了单一职责原则，复用性较差，类的个数也非常多。桥接模式可以极大的减少子类的个数，从而降低管理和维护的成本。</li>
<li>桥接模式极大的提高了系统可扩展性，在两个变化维度中任意扩展一个维度，都不需要修改原有的系统，符合开闭原则。</li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2019/png/196377/1560930087539-e2ffc059-8fb2-4524-9aea-dc5ee91ed5c7.png#align=left&amp;display=inline&amp;height=516&amp;originHeight=516&amp;originWidth=1303&amp;size=0&amp;status=done&amp;width=1303" alt=""></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java通过URLClassLoader让程序支持插件扩展]]></title>
        <id>https://liujinhua306.github.io/post/chajian</id>
        <link href="https://liujinhua306.github.io/post/chajian">
        </link>
        <updated>2019-06-26T03:33:25.000Z</updated>
        <content type="html"><![CDATA[<p>插件(Plugin)是什么不用多说。常用的软件，例如Eclipse、Photoshop、VisualStudio，都支持插件扩展。插件可以动态给软件添加一些功能，也可以随时删除，这样的好处是任何人都可以给这个软件进行功能上的扩展，而不用去改软件本身的代码。
<a name="IucKb"></a></p>
<h2 id=""><a href="http://xxgblog.com/2013/07/04/java-urlclassloader-plugin/#%E9%80%82%E7%94%A8%E5%9C%BA%E6%99%AF"></a>适用场景</h2>
<p>比如需要开发一个系统，用来将一些有数据推送给客户，至于是什么数据不是重点。有三个客户：A客户需要把数据组织成一个xml格式的文件，通过FTP上传到客户服务器上；B客户需要把数据组织成一个json，通过HTTP请求提交；C客户希望生成一个Excel文件再通过E-mail发送…以后可能还会有更多的客户，也还会有更多操蛋的需求。<br />对于这样一个系统的开发，如果使用普通的方式开发，那么每增加一个客户就要修改一次系统代码，在代码中增加一个针对某个客户的功能，很不灵活。如果再减少一个客户，那么其对应的代码也就没有用了，是不是要删除掉又成了问题。<br />以上只是一个例子，在实际开发中经常会有类似的情形，此时使用插件化的方式会更灵活。<br />遇到这种情况，可以把数据的获取和整理这块和客户无关的逻辑放在主程序中，而主程序提供一个客户推送的接口，接口定义一个未实现的抽象方法“推送数据”，这个方法由各个客户对应的插件来实现。这样新增一个客户需求，不需要修改主程序的代码，只需要实现这个接口就行，插件写好打成jar包放在指定目录下，再配置一下，主程序就可以使用这个插件了。当不需要这个插件，也可以通过配置来去掉它。
<a name="47bFo"></a></p>
<h2 id="-2"><a href="http://xxgblog.com/2013/07/04/java-urlclassloader-plugin/#%E4%B8%BB%E7%A8%8B%E5%BA%8F%E9%85%8D%E7%BD%AE%E6%8F%92%E4%BB%B6"></a>主程序配置插件</h2>
<p>上面说到主程序可以通过配置来动态添加和删除插件，配置的方式一般有两种：XML或数据库，二者选其一即可。
<a name="nxtNT"></a></p>
<h3 id="-3"><a href="http://xxgblog.com/2013/07/04/java-urlclassloader-plugin/#%E6%96%B9%E6%B3%95%E4%B8%80%EF%BC%9AXML"></a>方法一：XML</h3>
<p>主程序可以通过一个xml配置文件，动态配置插件。</p>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;plugins&gt;
	&lt;plugin&gt;
		&lt;name&gt;A客户插件&lt;/name&gt;
		&lt;jar&gt;D:/plugin/a-plugin.jar&lt;/jar&gt;
		&lt;class&gt;com.xxg.aplugin.APlugin&lt;/class&gt;
	&lt;/plugin&gt;
	&lt;plugin&gt;
		&lt;name&gt;B客户插件&lt;/name&gt;
		&lt;jar&gt;D:/plugin/b-plugin.jar&lt;/jar&gt;
		&lt;class&gt;com.xxg.bplugin.BPlugin&lt;/class&gt;
	&lt;/plugin&gt;
	&lt;plugin&gt;
		&lt;name&gt;C客户插件&lt;/name&gt;
		&lt;jar&gt;D:/plugin/c-plugin.jar&lt;/jar&gt;
		&lt;class&gt;com.xxg.cplugin.CPlugin&lt;/class&gt;
	&lt;/plugin&gt;
&lt;/plugins&gt;
</code></pre>
<p>主程序通过解析这个XML来调用插件，<plugin>元素即一个插件，可以通过添加和删除<plugin>元素来动态的添加和删除插件。<name>是插件名称，<jar>是插件jar文件所在的路径，<class>是插件实现主程序接口的类。
<a name="qWqs4"></a></p>
<h3 id="-4"><a href="http://xxgblog.com/2013/07/04/java-urlclassloader-plugin/#%E6%96%B9%E6%B3%95%E4%BA%8C%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93"></a>方法二：数据库</h3>
<p>如果使用数据库来配置插件，需要一个插件表（plugin_info）：</p>
<table>
<thead>
<tr>
<th style="text-align:left">id</th>
<th style="text-align:left">name</th>
<th style="text-align:left">jar</th>
<th style="text-align:left">class</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left">A客户插件</td>
<td style="text-align:left">D:/plugin/a-plugin.jar</td>
<td style="text-align:left">com.xxg.aplugin.APlugin</td>
</tr>
<tr>
<td style="text-align:left">2</td>
<td style="text-align:left">B客户插件</td>
<td style="text-align:left">D:/plugin/b-plugin.jar</td>
<td style="text-align:left">com.xxg.bplugin.BPlugin</td>
</tr>
<tr>
<td style="text-align:left">3</td>
<td style="text-align:left">C客户插件</td>
<td style="text-align:left">D:/plugin/c-plugin.jar</td>
<td style="text-align:left">com.xxg.cplugin.CPlugin</td>
</tr>
</tbody>
</table>
<p><a name="dVHbg"></a></p>
<h3 id="-5"><a href="http://xxgblog.com/2013/07/04/java-urlclassloader-plugin/#%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95%E7%9A%84%E5%8C%BA%E5%88%AB"></a>两种方法的区别</h3>
<p>两种方式从功能上来说是一样的。使用数据库方式的好处是可以很方遍的再开发一个管理界面来管理，不好的地方就是依赖数据库。
<a name="Yg8Li"></a></p>
<h2 id="-6"><a href="http://xxgblog.com/2013/07/04/java-urlclassloader-plugin/#%E4%B8%BB%E7%A8%8B%E5%BA%8F"></a>主程序</h2>
<p>下面是以XML作为插件配置方式的调用插件的主程序。<br />主程序需要提供一个接口来提供给插件开发者来实现：</p>
<pre><code class="language-java">package com.xxg.main;

public interface PluginService {
	public void service();
}
</code></pre>
<p>上面是一个接口，包含一个未实现的方法service()，这个方法即和客户相关的逻辑，由插件来实现。<br />插件封装类：</p>
<pre><code class="language-java">package com.xxg.main;

public class Plugin {
	private String name;
	
	private String jar;
	
	private String className;
	
	// setter、getter省略…
}
</code></pre>
<p>解析XML获取所有插件信息（这里用到dom4j）：</p>
<pre><code class="language-java">package com.xxg.main;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.Element;
import org.dom4j.io.SAXReader;

public class XMLParser {
	public static List&lt;Plugin&gt; getPluginList() throws DocumentException {
		List&lt;Plugin&gt; list = new ArrayList&lt;Plugin&gt;();
		
		SAXReader saxReader =new SAXReader();
		Document document = saxReader.read(new File(&quot;plugin.xml&quot;));
		Element root = document.getRootElement();
		List&lt;?&gt; plugins = root.elements(&quot;plugin&quot;);
		for(Object pluginObj : plugins) {
			Element pluginEle = (Element)pluginObj;
			Plugin plugin = new Plugin();
			plugin.setName(pluginEle.elementText(&quot;name&quot;));
			plugin.setJar(pluginEle.elementText(&quot;jar&quot;));
			plugin.setClassName(pluginEle.elementText(&quot;class&quot;));
			list.add(plugin);
		}
		return list;
	}
}
</code></pre>
<p>使用URLClassLoader动态加载jar文件，实例化插件中的对象：</p>
<pre><code class="language-java">package com.xxg.main;

import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLClassLoader;
import java.util.List;

public class PluginManager {
	private URLClassLoader urlClassLoader;

	public PluginManager(List&lt;Plugin&gt; plugins) throws MalformedURLException {
		init(plugins);
	}
	
	private void init(List&lt;Plugin&gt; plugins) throws MalformedURLException {
		int size = plugins.size();
		URL[] urls = new URL[size];
		
		for(int i = 0; i &lt; size; i++) {
			Plugin plugin = plugins.get(i);
			String filePath = plugin.getJar();

			urls[i] = new URL(&quot;file:&quot; + filePath);
		}
		
		// 将jar文件组成数组，来创建一个URLClassLoader
		urlClassLoader = new URLClassLoader(urls);
	}
	
	public PluginService getInstance(String className) throws ClassNotFoundException, InstantiationException, IllegalAccessException {
		// 插件实例化对象，插件都是实现PluginService接口
		Class&lt;?&gt; clazz = urlClassLoader.loadClass(className);
		Object instance = clazz.newInstance();

		return (PluginService)instance;
	}
}
</code></pre>
<p>main函数依次调用插件逻辑：</p>
<pre><code class="language-java">package com.xxg.main;

import java.util.List;

public class Main {
	public static void main(String[] args) {
		try {
			List&lt;Plugin&gt; pluginList = XMLParser.getPluginList();
			PluginManager pluginManager = new PluginManager(pluginList);
			for(Plugin plugin : pluginList) {
				PluginService pluginService = pluginManager.getInstance(plugin.getClassName());
				System.out.println(&quot;开始执行[&quot; + plugin.getName() + &quot;]插件...&quot;);
				// 调用插件
				pluginService.service();
				System.out.println(&quot;[&quot; + plugin.getName() + &quot;]插件执行完成&quot;);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
</code></pre>
<p><a name="MdRRD"></a></p>
<h2 id="插件开发">插件开发</h2>
<p>插件开发很简单，只需要把主程序的jar包引入到项目中，再实现主程序提供的接口就行：</p>
<pre><code class="language-java">package com.xxg.aplugin;

import com.xxg.main.PluginService;

public class APlugin implements PluginService {
	@Override
	public void service() {
		System.out.println(&quot;A客户插件正在执行~&quot;);
	}
}
</code></pre>
<p>service()方法应该实现客户相关的逻辑，即实现插件的功能。这里就用一句System.out.println来代替。<br />插件实现完成后，打个jar包，注意不要把主程序的部分也打到jar里。<br />再实现其他插件，插件实现完成后，配置主程序的plugin.xml。
<a name="m16sr"></a></p>
<h2 id="-7"><a href="http://xxgblog.com/2013/07/04/java-urlclassloader-plugin/#%E8%BF%90%E8%A1%8C%E7%A8%8B%E5%BA%8F"></a>运行程序</h2>
<p>配置好plugin.xml，插件jar放到配置的路径下。<br />运行主程序main方法：<br /><em>开始执行[A客户插件]插件…</em><br /><em>A客户插件正在执行~</em><br /><em>[A客户插件]插件执行完成</em><br /><em>开始执行[B客户插件]插件…</em><br /><em>B客户插件正在执行~</em><br /><em>[B客户插件]插件执行完成</em><br /><em>开始执行[C客户插件]插件…</em><br /><em>C客户插件正在执行~</em><br /><em>[C客户插件]插件执行完成</em><br />以上，就完成了主程序和插件的开发。
<a name="YMW8w"></a></p>
<h2 id="-8"><a href="http://xxgblog.com/2013/07/04/java-urlclassloader-plugin/#%E6%89%A9%E5%B1%95%EF%BC%9Aservice-%E5%8F%82%E6%95%B0%E3%80%81%E8%BF%94%E5%9B%9E%E5%80%BC"></a>扩展：service()参数、返回值</h2>
<p>如果逻辑需要的话，service()可以添加参数和返回值。例如主程序需要传入数据给插件，可以加入参数，插件需要返回结果给主程序，可以加入返回值。<br />例如传给插件一些插件需要的配置项。在上面的场景中，各个客户的需求不同。A需要FTP上传，那么需要FTP服务器的地址、端口号、用户名、密码配置项；B需要HTTP请求，那么需要请求地址配置项；C需要发送邮件，那么需要e-mail地址配置项。<br />这些配置项可以统一配置在XML或数据库中。
<a name="XML"></a></p>
<h3 id="-9"><a href="http://xxgblog.com/2013/07/04/java-urlclassloader-plugin/#XML"></a>XML</h3>
<p>每个插件元素中加入<properties>元素来配置。</p>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;plugins&gt;
	&lt;plugin&gt;
		&lt;name&gt;A客户插件&lt;/name&gt;
		&lt;jar&gt;D:/plugin/a-plugin.jar&lt;/jar&gt;
		&lt;class&gt;com.xxg.aplugin.APlugin&lt;/class&gt;
		&lt;properties&gt;
			&lt;property name=&quot;FTP_IP&quot;&gt;192.168.7.1&lt;/property&gt;
			&lt;property name=&quot;FTP_PORT&quot;&gt;21&lt;/property&gt;
			&lt;property name=&quot;FTP_USERNAME&quot;&gt;XXG&lt;/property&gt;
			&lt;property name=&quot;FTP_PASSWORD&quot;&gt;123456&lt;/property&gt;
		&lt;/properties&gt;
	&lt;/plugin&gt;
	&lt;plugin&gt;
		&lt;name&gt;B客户插件&lt;/name&gt;
		&lt;jar&gt;D:/plugin/b-plugin.jar&lt;/jar&gt;
		&lt;class&gt;com.xxg.bplugin.BPlugin&lt;/class&gt;
		&lt;properties&gt;
			&lt;property name=&quot;URL&quot;&gt;http://www.xxg.com/api&lt;/property&gt;
		&lt;/properties&gt;
	&lt;/plugin&gt;
	&lt;plugin&gt;
		&lt;name&gt;C客户插件&lt;/name&gt;
		&lt;jar&gt;D:/plugin/c-plugin.jar&lt;/jar&gt;
		&lt;class&gt;com.xxg.cplugin.CPlugin&lt;/class&gt;
		&lt;properties&gt;
			&lt;property name=&quot;EMAIL&quot;&gt;xxg@xxg.com&lt;/property&gt;
		&lt;/properties&gt;
	&lt;/plugin&gt;
&lt;/plugins&gt;
</code></pre>
<p><a name="gUJqx"></a></p>
<h3 id="数据库">数据库</h3>
<p>如果使用数据库配置的话，数据库要再加一个插件配置表（plugin_config_info）：</p>
<table>
<thead>
<tr>
<th style="text-align:left">id</th>
<th style="text-align:left">plugin_id</th>
<th style="text-align:left">name</th>
<th style="text-align:left">value</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left">1</td>
<td style="text-align:left">FTP_IP</td>
<td style="text-align:left">192.168.7.1</td>
</tr>
<tr>
<td style="text-align:left">2</td>
<td style="text-align:left">1</td>
<td style="text-align:left">FTP_PORT</td>
<td style="text-align:left">21</td>
</tr>
<tr>
<td style="text-align:left">3</td>
<td style="text-align:left">1</td>
<td style="text-align:left">FTP_USERNAME</td>
<td style="text-align:left">XXG</td>
</tr>
<tr>
<td style="text-align:left">4</td>
<td style="text-align:left">1</td>
<td style="text-align:left">FTP_PASSWORD</td>
<td style="text-align:left">123456</td>
</tr>
<tr>
<td style="text-align:left">5</td>
<td style="text-align:left">2</td>
<td style="text-align:left">URL</td>
<td style="text-align:left"><a href="http://www.xxg.com/api">http://www.xxg.com/api</a></td>
</tr>
<tr>
<td style="text-align:left">6</td>
<td style="text-align:left">3</td>
<td style="text-align:left">EMAIL</td>
<td style="text-align:left"><a href="mailto:xxg@xxg.com">xxg@xxg.com</a></td>
</tr>
</tbody>
</table>
<p>主程序定义接口，加入一个Map&lt;String,String&gt;参数来传入这些配置：</p>
<pre><code class="language-java">package com.xxg.main;

import java.util.Map;

public interface PluginService {
	public void service(Map&lt;String,String&gt; configs);
}
</code></pre>
<p>在插件中，可以获取这些配置：</p>
<pre><code class="language-java">package com.xxg.aplugin;

import java.util.Map;

import com.xxg.main.PluginService;

public class APlugin implements PluginService {
	@Override
	public void service(Map&lt;String, String&gt; configs) {
		String ftpIp = configs.get(&quot;FTP_IP&quot;);
		String ftpPort = configs.get(&quot;FTP_PORT&quot;);
		String ftpUsername = configs.get(&quot;FTP_USERNAME&quot;);
		String ftpPassword = configs.get(&quot;FTP_PASSWORD&quot;);
		
		// ...
	}
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[嵌套练习]]></title>
        <id>https://liujinhua306.github.io/post/qian-tao-lian-xi</id>
        <link href="https://liujinhua306.github.io/post/qian-tao-lian-xi">
        </link>
        <updated>2019-06-26T03:22:22.000Z</updated>
        <content type="html"><![CDATA[<p><img src="https://img.shields.io/badge/auth-liujinhua-blue.svg#align=left&amp;display=inline&amp;height=20&amp;originHeight=20&amp;originWidth=92&amp;status=done&amp;width=92" alt="">  <img src="https://img.shields.io/badge/postgresl-9.6-red.svg#align=left&amp;display=inline&amp;height=20&amp;originHeight=20&amp;originWidth=88&amp;status=done&amp;width=88" alt=""></p>
<pre><code class="language-sql">-- 表结构
-- 
-- 学生表student(id,name)
-- 列表项目
-- 课程表course(id,name)
-- 学生课程表student_course(sid,cid,score)
-- sql
create table student(
id int unsigned primary key auto_increment,
name char(10) not null
);
insert into student(name) values('张三'),('李四');

create table course(
id int unsigned primary key auto_increment,
name char(20) not null
);
insert into course(name) values('语文'),('数学');

create table student_course(
sid int unsigned,
cid int unsigned,
score int unsigned not null,
foreign key (sid) references student(id),
foreign key (cid) references course(id),
primary key(sid, cid)
);

insert into student_course values(1,1,80),(1,2,90),(2,1,90),(2,2,70);

--在student_course表中查询每门课成绩都不低于80的学生id
select distinct sid
from student_course
where sid not in (select sid from student_course where score &lt; 80);

-- 查询每个学生的总成绩，结果列出学生姓名和总成绩
select name,sum(score)
from student left join student_course
on student.id=student_course.sid
group by sid;


-- 在student_course表查询各科成绩最高的学生，结果列出学生id、课程id和对应的成绩
select * from student_course as x 
where score&gt;=(
 select max(score) from student_course as y 
 where cid=x.cid
 );
 
 --在student_course表中查询每门课的前2名，结果按课程id升序，同一课程按成绩降序 这个问题也就是取每组的前N条纪录
  select * from student_course x 
 where 2&gt;(
 select count(*) from student_course y 
 where y.cid=x.cid and y.score&gt;x.score
 ) 
order by cid,score desc;
--这也是一个相关嵌套查询，对于每一个分数，如果同一门课程下只有0个、1个分数比这个分数还高，那么这个分数肯定是前2名之一
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[exists练习]]></title>
        <id>https://liujinhua306.github.io/post/exists-lian-xi</id>
        <link href="https://liujinhua306.github.io/post/exists-lian-xi">
        </link>
        <updated>2019-06-26T03:16:24.000Z</updated>
        <content type="html"><![CDATA[<p><img src="https://img.shields.io/badge/postgresl-9.6-red.svg#align=left&amp;display=inline&amp;height=24&amp;originHeight=20&amp;originWidth=88&amp;status=done&amp;width=106" alt=""></p>
<pre><code class="language-sql">-- 学生表
CREATE TABLE `student` (
  `id` int(11) NOT NULL,
  `name` varchar(10) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

INSERT INTO student (`id`, `name`) VALUES ('100', 'xiaoming');
INSERT INTO student (`id`, `name`) VALUES ('101', 'tom');
INSERT INTO student (`id`, `name`) VALUES ('102', 'blue');
INSERT INTO student (`id`, `name`) VALUES ('103', 'jim');
INSERT INTO student (`id`, `name`) VALUES ('104', 'tonny');


-- 课程表
CREATE TABLE `course` (
  `id` int(11) NOT NULL,
  `C_NAME` varchar(20) DEFAULT NULL,
  `C_NO` varchar(10) DEFAULT NULL,
  KEY `id` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

INSERT INTO course (`id`, `C_NAME`, `C_NO`) VALUES ('200', 'java', NULL);
INSERT INTO course (`id`, `C_NAME`, `C_NO`) VALUES ('201', 'php', NULL);
INSERT INTO course (`id`, `C_NAME`, `C_NO`) VALUES ('202', 'python', NULL);
INSERT INTO course (`id`, `C_NAME`, `C_NO`) VALUES ('203', 'c++', NULL);
INSERT INTO course (`id`, `C_NAME`, `C_NO`) VALUES ('204', 'c#', NULL);


-- 选课表
CREATE TABLE `select_course` (
  `id` int(11) NOT NULL,
  `STUDENT_ID` int(11) DEFAULT NULL,
  `COURSE_ID` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `foreign_key_stu` (`STUDENT_ID`),
  KEY `foreign_key_sou` (`COURSE_ID`),
  CONSTRAINT `foreign_key_sou` FOREIGN KEY (`COURSE_ID`) REFERENCES `course` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `foreign_key_stu` FOREIGN KEY (`STUDENT_ID`) REFERENCES `student` (`id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

INSERT INTO select_course (`id`, `STUDENT_ID`, `COURSE_ID`) VALUES ('1', '100', '200');
INSERT INTO select_course (`id`, `STUDENT_ID`, `COURSE_ID`) VALUES ('2', '100', '201');
INSERT INTO select_course (`id`, `STUDENT_ID`, `COURSE_ID`) VALUES ('3', '100', '202');
INSERT INTO select_course (`id`, `STUDENT_ID`, `COURSE_ID`) VALUES ('4', '100', '203');
INSERT INTO select_course (`id`, `STUDENT_ID`, `COURSE_ID`) VALUES ('5', '100', '204');
INSERT INTO select_course (`id`, `STUDENT_ID`, `COURSE_ID`) VALUES ('6', '101', '200');
INSERT INTO select_course (`id`, `STUDENT_ID`, `COURSE_ID`) VALUES ('7', '101', '202');
INSERT INTO select_course (`id`, `STUDENT_ID`, `COURSE_ID`) VALUES ('8', '101', '204');
INSERT INTO select_course (`id`, `STUDENT_ID`, `COURSE_ID`) VALUES ('9', '102', '200');
INSERT INTO select_course (`id`, `STUDENT_ID`, `COURSE_ID`) VALUES ('10', '102', '203');
INSERT INTO select_course (`id`, `STUDENT_ID`, `COURSE_ID`) VALUES ('11', '102', '204');
INSERT INTO select_course (`id`, `STUDENT_ID`, `COURSE_ID`) VALUES ('12', '103', '202');
INSERT INTO select_course (`id`, `STUDENT_ID`, `COURSE_ID`) VALUES ('13', '103', '203');
INSERT INTO select_course (`id`, `STUDENT_ID`, `COURSE_ID`) VALUES ('15', '101', '203');


-- 查询选了所有课程的学生姓名--
SELECT
	NAME
FROM
	student s
WHERE
	NOT EXISTS (
		SELECT
			*
		FROM
			course c
		WHERE
			NOT EXISTS (
				SELECT
					*
				FROM
					select_course sc
				WHERE
					sc.student_id = s.id
				AND sc.course_id = c.id
			)
	);

-- 查询被所有学生都选了的课程名--
SELECT
	c.C_NAME
FROM
	course c
WHERE
	NOT EXISTS (
		SELECT
			*
		FROM
			student s
		WHERE
			NOT EXISTS (
				SELECT
					*
				FROM
					select_course sc
				WHERE
					sc.student_id = s.id
				AND sc.course_id = c.id
			)
	);

-- 查询至少选择了一门课程的学生姓名--
SELECT
	NAME
FROM
	student s
WHERE
	EXISTS (
		SELECT
			*
		FROM
			course c
		WHERE
			EXISTS (
				SELECT
					*
				FROM
					select_course sc
				WHERE
					sc.student_id = s.id
				AND sc.course_id = c.id
			)
	);

-- 查询一门课程也没选的学生姓名--
SELECT
	NAME
FROM
	student s
WHERE
	NOT EXISTS (
		SELECT
			*
		FROM
			course c
		WHERE
			EXISTS (
				SELECT
					*
				FROM
					select_course sc
				WHERE
					sc.student_id = s.id
				AND sc.course_id = c.id
			)
	);

-- 查询没有选择全部课程的学生姓名（包括一门也没选择的同学）
SELECT
	NAME
FROM
	student s
WHERE
	EXISTS (
		SELECT
			*
		FROM
			course c
		WHERE
			NOT EXISTS (
				SELECT
					*
				FROM
					select_course sc
				WHERE
					sc.student_id = s.id
				AND sc.course_id = c.id
			)
	);
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[postgresql常用命令]]></title>
        <id>https://liujinhua306.github.io/post/postgresql-chang-yong-ming-ling</id>
        <link href="https://liujinhua306.github.io/post/postgresql-chang-yong-ming-ling">
        </link>
        <updated>2019-06-26T03:12:12.000Z</updated>
        <content type="html"><![CDATA[<p><img src="https://img.shields.io/badge/author-liujinhua-blue.svg#align=left&amp;display=inline&amp;height=20&amp;originHeight=20&amp;originWidth=104&amp;status=done&amp;width=104" alt=""> 
<img src="https://img.shields.io/badge/postgresql-9.6-red.svg#align=left&amp;display=inline&amp;height=20&amp;originHeight=20&amp;originWidth=94&amp;status=done&amp;width=94" alt=""></p>
<p><a name="86fb9487"></a></p>
<h4 id="常规操作">常规操作</h4>
<ol>
<li>登录postgreSQL所在服务器</li>
<li>执行 psql -U postgres 启动postgreSQL终端</li>
<li>输入数据库密码 12345)(*&amp;^%RFVwsx</li>
<li>执行 \l 查看所有库</li>
<li>执行 \c NXSOC5 即访问NXSOC5数据库</li>
<li>即可执行相关SQL语句操作NXSOC5数据库</li>
<li>\d 表名 查看表结构</li>
</ol>
<p><a name="157d5306"></a></p>
<h4 id="创建数据库">创建数据库</h4>
<pre><code class="language-sql">CREATE DATABASE database_name;
</code></pre>
<p><a name="34609275"></a></p>
<h4 id="修改数据库名称及owner">修改数据库名称及owner</h4>
<pre><code class="language-sql">ALTER DATABASE name RENAME TO new_name

ALTER DATABASE name OWNER TO new_owner
</code></pre>
<p><a name="c40ae226"></a></p>
<h4 id="备份恢复数据库">备份/恢复数据库</h4>
<pre><code class="language-sql">-- postgres 数据库备份命令(该方式会生成二进制的压缩文件)
./pg_dump --host 127.0.0.1 --port 5432 --username &quot;postgres&quot;   --format custom --blobs --verbose --file &quot;/root/socdb.backup&quot; NXSOC_MG

-- NXSOC_MG 为要备份的数据库名。 输入命令后 会提示输入数据库密码。

-- postgres 数据库恢复命令(适合以上备份的方式)
./pg_restore -h 127.0.0.1 -p 5432 -U postgres -W -d NXSOC_MG -v &quot;/root/socdb.backup&quot;

-W 是强制口令提示
-- 输入命令后 会提示输入数据库密码。
</code></pre>
<p><a name="a301a2d4"></a></p>
<h4 id="增加表字段和修改表字段类型">增加表字段和修改表字段类型</h4>
<pre><code class="language-sql">alter table t_siem_dev_find alter  COLUMN  isnew type  int4 ;(修改字段)
alter table t_siem_dev_find add  COLUMN  isnew   int4 ;(增加字段)
</code></pre>
<p>注意： 把id的varchar变为int</p>
<pre><code class="language-sql">postgres=# alter table tb101 alter id type int;
ERROR:  column &quot;id&quot; cannot be cast automatically to type integer
HINT:  Specify a USING expression to perform the conversion.
</code></pre>
<p>上面这样执行后报错了<br />在没有隐式的转换下，就需要指定Using来显示的转换。</p>
<pre><code class="language-sql">postgres=# alter table tb101 alter id type int using id::int;
</code></pre>
<p><a name="14dc2110"></a></p>
<h4 id="子父表继承关系">子父表继承关系</h4>
<pre><code class="language-sql">-- 删除子表与父表的继承关系
alter table t_siem_original_log_20181106 no inherit t_siem_original_log
-- 添加子表与父表的继承关系
alter table t_siem_original_log_20181106  inherit t_siem_original_log
</code></pre>
<p><a name="b30cbcf3"></a></p>
<h4 id="备份表和恢复表">备份表和恢复表</h4>
<pre><code class="language-sql">-- 备份指定表
./pg_dump --host 127.0.0.1 --port 5432 --username &quot;postgres&quot; -Fc -t t_siem_threat_log  -f /threatTable.backup NXSOC5

-- 恢复单表
./pg_restore -h 127.0.0.1 -p 5432 -U postgres -W -d NXSOC5 -t ti_alarm -v &quot;/alarm.backup&quot;
-t指定表

-- 以insert into 的SQL语句导出
pg_dump -h 172.16.12.17 -U postgres --inserts -t  t_siem_moni_ne NXSOC5 &gt; /tmp/test1.sql
</code></pre>
<p><a name="1d259eb8"></a></p>
<h4 id="查看postgresql的oid和表占磁盘大小">查看postgresql的oid和表占磁盘大小</h4>
<pre><code class="language-sql">-- 查看数据库oid
select oid,datname from pg_database; 
-- 查看表的oid
select oid from pg_class where relname='t_siem_alarm_active' ;
select 
-- 查看表占磁盘大小pg_size_pretty(pg_relation_size('t_siem_original_log_201809_39'));
</code></pre>
<p><a name="e0e3ddfc"></a></p>
<h4 id="postgresql时间操作">postgresql时间操作</h4>
<pre><code class="language-sql">-- 当前时间减去两个月
SELECT CURRENT_DATE-interval'2 month');
</code></pre>
<p><a name="f6d2fa2b"></a></p>
<h4 id="删除表的规则">删除表的规则</h4>
<pre><code class="language-sql">DROP RULE &quot;rule_t_siem_original_log_20190426&quot; ON &quot;public&quot;.&quot;t_siem_original_log&quot;;
</code></pre>
<p><a name="75be9192"></a></p>
<h4 id="sql拼接">sql拼接</h4>
<pre><code class="language-sql">Select CONCAT( 'drop table ', tablename, ';' ) 
FROM pg_tables
Where tablename like 't_siem_original_log_%' and tablename &lt; 't_siem_original_log_201901_2';
</code></pre>
<p><a name="5512d417"></a></p>
<h4 id="字符串截取">字符串截取</h4>
<pre><code class="language-sql">update  t_portal_monitor_table  set srccity= substring(sitekindname from 1 for 2) where  createdatetime&gt; '2019-01-02 00:00:00'
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[postgresql 脚本语句练习]]></title>
        <id>https://liujinhua306.github.io/post/postgresql</id>
        <link href="https://liujinhua306.github.io/post/postgresql">
        </link>
        <updated>2019-06-26T03:09:15.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-sql">DO
$do$
BEGIN
IF EXISTS (SELECT 1 FROM orders) THEN
   DELETE FROM orders;
ELSE 
   INSERT INTO orders VALUES (1,2,3);
END IF;
END
$do$
</code></pre>
<pre><code class="language-sql">-- 查询t_sys_menu表的id并赋值给menu变量（menu变量是RECORD类型的） 然后for循环 查询t_sys_role_resource表
-- 中是否有该menuid的记录。没有就插入。 
DO $body$ DECLARE
menu RECORD;
BEGIN
    FOR menu IN ( SELECT recordid FROM t_sys_menu )
    LOOP
  IF
    ( SELECT COUNT ( 1 ) FROM t_sys_role_resource WHERE roleid = '1' AND menuid = menu.recordid ) = 0 --一定要加括号
  THEN
      INSERT INTO &quot;public&quot;.&quot;t_sys_role_resource&quot; ( &quot;recordid&quot;, &quot;roleid&quot;, &quot;menuid&quot;, &quot;buttons&quot; )
    VALUES
      ( menu.recordid, '1', menu.recordid, NULL );
    ELSE 
    --nothing to do;
    
  END IF;
  
END LOOP;

END;
$body$ LANGUAGE PLPGSQL;
</code></pre>
<pre><code class="language-sql">-- 查询出menuid后再赋值给menu_id
DO $body$ DECLARE
menu_id VARCHAR ( 1000 );
BEGIN
    menu_id=(select menuid from t_sys_role_resource where recordid='800005003' );
    update t_sys_menu set flag=0 where recordid=menu_id;
END;
$body$ LANGUAGE PLPGSQL;
</code></pre>
]]></content>
    </entry>
</feed>